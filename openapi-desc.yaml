openapi: 3.0.0

x-publicDocumentationRedocOptions:
  - no-auto-auth
  - max-displayed-enum-values="10"

info:
  title: Unity Advertising Management API
  version: v1.0 latest
  description: |
    # Introduction

    This is the API documentation for the Unity Advertising Management API version 1 that allows
    you to programmatically manage your advertising campaigns through a RESTful API. The API currently offers endpoints
    that allow you to:

    * Manage <a href="#tag/Apps">Apps</a>
    * Manage <a href="#tag/Campaigns">Campaigns</a>
    * Manage <a href="#tag/Bids">Bids, Source Bids and Return On Ad Spend (ROAS) Bids</a>
    * Manage <a href="#tag/Budgets">Budgets</a>
    * Manage <a href="#tag/Creatives">Creatives</a> and <a href="#tag/Creative-Packs">Creative Packs</a>

    ## Getting Started

    To get started, you will first need to create a service account and assign suitable roles for it. The
    <a href="#section/Authentication">authentication section</a> has instructions for creating service accounts as well
    as for adding suitable authentication headers to your API requests. Note that you must be an Organization
    [Owner](https://docs.unity3d.com/Manual/OrgsManagingyourOrganization.html) to manage service accounts.

    The <a href="#section/General-Information">general information section</a> describes shortly the entities found in
    the API, their relationships as well as the resource IDs used in the API.

    The <a href="#tag/Apps">endpoint section</a> contains documentation for the actual API endpoints.

    The API endpoints are hosted at the following base URL: `https://services.api.unity.com`.

    **How to Gain Access?**

    **Note**: To be able to access the API and to create service accounts, your organization needs to have access granted
    to the Advertising Management API. Please contact
    your Unity Client Partner or email us at unityads-support@unity3d.com.

    ## Contact

    If you have any questions or feedback regarding the API you can reach out to us at unityads-support@unity3d.com.

    # Versions and API Lifecycle

    This section describes the past and upcoming changes to the API.

    ## Change Log

    * July 27, 2022: Added `billingType`-field to the request body of <a href="#operation/advertise-createCampaign">create campaign</a> endpoint.
    * May 12, 2022: Added support for <a href="#operation/advertiser-deleteApp">deleting an app</a>.
    * May 6, 2022: Added support for <a href="#operation/advertise-updateApp">updating an app</a>.
    * May 3, 2022: Added `adomain`-field to the request body of <a href="#operation/advertise-createApp">create App</a> endpoint.
    * April 19, 2022: Added `adomain`-field to the responses of <a href="#operation/advertise-getApp">get App</a> and <a href="#operation/advertise-listApps">list Apps</a> endpoints.
    * January 28, 2022: Added support for <a href="#operation/advertise-getTargeting">retrieving a campaign targeting options</a>.
    * January 26, 2022: Added support for <a href="#operation/advertise-updateTargeting">updating targeting options</a>.
    * December 16, 2021: Increased the <a href="#section/General-Information/Rate-Limits">default rate limit</a> to 6 requests per second.
    * December 10, 2021: Added support for <a href="#operation/advertise-getBudget">retrieving a campaign Budget</a>.
    * December 2, 2021: Added support to filter Apps in the <a href="#operation/advertise-listApps">list Apps</a> endpoint by `store` and `storeId`.
    * November 29, 2021: Added support for <a href="#operation/advertise-getApp">retrieving an app</a>.
    * November 25, 2021: Added support for <a href="#operation/advertise-createApp">creating apps</a>.
    * November 15, 2021: Make the `storeId` field nullable in the App listing endpoint.
    * October 14, 2021: Added support for creating playable creatives.
    * October 11, 2021: Fixed some error messages for enabled campaigns that were referring to them as "live" campaigns.
    * October 1, 2021: Added support for <a href="#operation/advertise-updateCampaign">updating a campaign</a>.
    * September 28, 2021: Added support for <a href="#operation/advertise-deleteCampaign">deleting a campaign</a>.
    * September 21, 2021: Added support for <a href="#operation/advertise-createCampaign">campaign creation</a>.
    * September 10, 2021: Added support for <a href="#operation/advertise-getCampaign">retrieving a Campaign</a>.
    * September 6, 2021: Fixed an issue that caused the <a href="#operation/advertise-updateBudget">update Campaign Budget</a> endpoint to have too strict rate limit.
    * September 1, 2021: Changed the <a href="#operation/advertise-listCampaigns">list Campaigns</a> endpoint to include `enabled, attributionClickUrl, attributionStartUrl, attributionViewUrl, scheduleStart, scheduleEnd` fields.
    * August 23, 2021: Added pagination support for <a href="#operation/advertise-listCreativePacks">list Creative Packs</a> endpoint.
    * August 13, 2021: Added support for <a href="#operation/advertise-createBudget">create Campaign Budget</a> endpoint.
    * July 27, 2021: Added support for **Video and Playable** creative pack type in the <a href="#operation/advertise-createCreativePack">create creative pack endpoint</a>.
    * July 26, 2021: Added support for <a href="#operation/advertise-listRetentionInfo">listing Retention information</a>.
    * July 22, 2021: Added support for <a href="#operation/advertise-replaceRetentionBids">replace Retention bids</a>.
    * July 20, 2021: Added support for <a href="#operation/advertise-listRetentionBids">listing Retention bids</a>.
    * July 19, 2021: Added `storeId`-field to the responses of <a href="#operation/advertise-listApps">list Apps</a> endpoint.
    * July 14, 2021: Added support for <a href="#operation/advertise-listRoasInfo">listing ROAS information</a>.
    * July 7, 2021: Changed the <a
        href="#operation/advertise-listCampaigns">list Campaigns</a> endpoint to include the ROAS types field for ROAS campaigns.
    * July 7, 2021: Added support to filter creative packs in the <a href="#operation/advertise-listCreativePacks">list Creative Packs</a> endpoint by name.
    * July 2, 2021: Added `campaignIds`-field to the responses of <a href="#operation/advertise-getCreativePack">get
        Creative Pack</a> and <a href="#operation/advertise-listCreativePacks">list Creative Packs</a> endpoints.
    * July 1, 2021: Added support for <a href="#operation/advertise-replaceRoasBids">replace ROAS (Return On Ad Spend) bids</a>.
    * June 30, 2021: Changed the <a
        href="#operation/advertise-listCpiBids">list CPI bids</a> and <a
        href="#operation/advertise-listSourceBids">list source bids</a> endpoints to return a 404 error if the campaign type is not Installs.
    * June 23, 2021: Changed support contact address to unityads-support@unity3d.com.
    * June 17, 2021: Added support for <a href="#operation/advertise-listRoasBids">listing ROAS (Return On Ad Spend) bids</a>.
    * May 20, 2021: Added support for <a href="#operation/advertise-updateBudget">updating a Campaign Budget</a>.
    * May 14, 2021: Added support for <a href="#operation/advertise-replaceAssignedBudget">assigning a Campaign Budget</a>.
    * May 7, 2021: Added support for <a href="#operation/advertise-unassignBudget">unassigning a Campaign Budget</a>.
    * May 6, 2021: Added support for <a href="#operation/advertise-getAssignedBudget">retrieving Assigned Budget</a>.
    * May 3, 2021: Added support for <a href="#operation/advertise-listBudgets">listing Campaign Budgets</a>.
    * April 28, 2021: Added support for <a href="#operation/advertise-listApps">listing Apps</a>.
    * April 19, 2021: Added billingType field to list campaigns endpoint.
    * April 8, 2021: Unity Advertising Management API version 1 (beta) released.
    * February 17, 2021: First draft of the version 1 of the Unity Advertising Management API.

    ## API Versioning

    The APIs are versioned by having a version number as a part of the endpoint URL. The API may receive non-breaking
    changes without its version number being changed. Breaking changes are introduced only to new API versions.

    Non-breaking changes can include (but are not limited to) for example:

    * Adding new optional request headers
    * Adding new fields to the response
    * Adding new status codes to the response status codes list
    * Changing a required field to be optional
    * Changes to rate limits
    * Under-the-hood fixes that donâ€™t change the URL signature, the request format or the response format

    Breaking changes can include (but are not limited to) for example:

    * Changing the URL signature
    * Removing a field from the response
    * Adding a new required field to the request

    ## Deprecation Policy

    If a newer version of the API is released or if the service is discontinued, the API or one of its versions may be
    deprecated and eventually shutdown.

    Deprecation of an API version will occur in 2 steps:

    1. Unity's client partner or support team will email Organization owners, informing them of the new version's imminent
       release and the current version's deprecation date. A deprecation notice will appear on the HTTP headers of any
       deprecated API, and the documentation will be updated as such.
    2. After 3 months of continued support for a deprecated version, Unity may cease support or shut down the version
       entirely. A complete shutdown notice will be sent 1 month in advance.

    # Authentication

    To learn how to authenticate your requests, please visit the <a href="/docs#get-started">Getting Started section</a>.

    ## Roles and Permissions

    The service account must have the relevant access to be able to call the APIs. Please see below for the available
    service account roles and their corresponding access rights:

    | Role                                | Access Rights                                                                                                 |
    |-------------------------------------|---------------------------------------------------------------------------------------------------------------|
    | Advertise API Admin                 | Grants full read and write access.                                                                            |
    | Advertise API Viewer                | Grants access to all the read endpoints.                                                                      |
    | Advertise API Apps Editor           | Grants access to all the read and update endpoints for apps.                                                  |
    | Advertise API Campaigns Editor      | Grants access to all the read and update endpoints for campaigns.                                             |
    | Advertise API Bids Editor           | Grants access to all the read and update endpoints for all the bid types.                                     |
    | Advertise API Budgets Editor        | Grants access to all the read and update endpoints for budgets and budget assignments.                        |                      
    | Advertise API Creative Packs Editor | Grants access to all the read and update endpoints for creatives, creative packs and assigned creative packs. |
    | Advertise API Targeting Editor      | Grants access to all the read and update endpoints for targeting options.                                     |

    # General Information

    ## Entity Relationships

    This section provides an overview on what the different resources in the API are and how they relate to each other.

    At the top level, the API has a resource that is called `App`. The `App` resource corresponds to a single app/game
    that has been published in a single app store. If you have published your app/game in more than one app store then
    you will have a separate `App` resource for each of those stores. Note that it is also possible to have more than one
    `App` resources that correspond to the same app/game in a store. The following diagram visualizes this relationship
    for a game called `My Game`:

    ```mermaid
      graph TD

      StoreApp1(My Game for Platform X) --- AdsApp1
      StoreApp2(My Game for Platform Y) --- AdsApp2

      subgraph App Store 1
        StoreApp1
      end

      subgraph App Store 2
        StoreApp2
      end

      subgraph Unity Ads
        AdsApp1(App) --- Resources1-1("...")
        AdsApp1 --- Resources1-2("...")
        AdsApp1 --- Resources1-3("...")

        AdsApp2(App) --- Resources2-1("...")
        AdsApp2 --- Resources2-2("...")
        AdsApp2 --- Resources2-3("...")
      end

      classDef grey fill:#eee,stroke:#333,stroke-width:1px;
      classDef white fill:#fff,stroke:#333,stroke-width:1px;
      classDef green fill:#9f9,stroke:#333,stroke-width:1px;
      classDef blue fill:#1e60ab,color:#fff,stroke:#333,stroke-width:1px;
      classDef red fill:#f33,color:#fff,stroke:#333,stroke-width:1px;

      class StoreApp1,StoreApp2 grey
      class AdsApp1,AdsApp2 white
      class Resources1-1,Resources2-1 blue
      class Resources1-2,Resources2-2 green
      class Resources1-3,Resources2-3 red
    ```

    Apps contain advertisement campaigns and resources related to those campaigns such as bids and creatives:

    ```mermaid
      graph TD

      subgraph Unity Ads
        App ---|has| Creative("Creative (Video, Playable or End Card)")
        App ---|has| CreativePack(Creative Pack)
        App(App) ---|has| Campaign(Campaign)
        CreativePack -.-|uses| Creative
        Campaign -.-|uses| CreativePack
        Campaign --- Bid(CPI bids and Source Bids)
      end

      classDef white fill:#fff,stroke:#333,stroke-width:1px;
      classDef green fill:#9f9,stroke:#333,stroke-width:1px;
      classDef blue fill:#1e60ab,color:#fff,stroke:#333,stroke-width:1px;

      class App white
      class Campaign,Bid blue
      class Creative,CreativePack green
    ```

    Apps hold also further configuration that is utilized by the campaigns, such as budgets:

    ```mermaid
      graph TD

      subgraph Unity Ads
        App(App) ---|has| Budget(Budget)
        App(App) ---|has| Campaign(Campaign)
        Campaign -.-|uses| Budget
      end

      classDef white fill:#fff,stroke:#333,stroke-width:1px;
      classDef green fill:#9f9,stroke:#333,stroke-width:1px;
      classDef blue fill:#1e60ab,color:#fff,stroke:#333,stroke-width:1px;
      classDef red fill:#f33,color:#fff,stroke:#333,stroke-width:1px;

      class App white
      class Campaign blue
      class Budget red
    ```

    ## Glossary

    This section provides a more detailed explanation of the vocabulary used in the API.

    ### Apps and Campaigns

    | Entity                     |  Description                                                                                                                    |
    |----------------------------|---------------------------------------------------------------------------------------------------------------------------------|
    | [App](#tag/Apps)           | App that is published in an app store and contains a set of campaigns. Apps are identified by campaignSetId.                    |
    | [Campaign](#tag/Campaigns) | Campaign holds the details of your advertisement campaign such as which bids to set and which ad assets to use.                 |

    ### Bid Types

    | Entity                                                  |  Description                                                                                                                                                                  |
    |---------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | [CPI Bid](#operation/advertise-listCpiBids)             | CPI (cost per install) bids are used for targeting and pricing on a per-country basis within your ad campaign.                                                                |
    | [Source Bid](#operation/advertise-listSourceBids)       | Source bids are used for granularly targeting and pricing apps (sources) on a per-country basis within your ad campaign.                                                      |
    | [ROAS Bid](#operation/advertise-listRoasBids)           | ROAS (Return On Ad Spend) bids are dynamically priced bids that are used for targeting users that are predicted to generate revenue through in-app purchases or watching ads. |
    | [Retention Bid](#operation/advertise-listRetentionBids) | Retention bids are dynamically priced bids that are used for targeting users that are likely to remain in your game 7 days after install.                                     |

    ### Creative Packs and Creatives

    | Entity                               |  Description                                                                                                                      |
    |--------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------|
    | [Creative](#tag/Creatives)           | Creative holds either one or two ad assets (files).                                                                               |
    | [Creative Pack](#tag/Creative-Packs) | A creative pack combines 1-3 creatives into one entity that can be assigned to one or more campaigns.                             |
    | End Card Creative                    | End cards are creative assets displayed at the end of a video with a call to action for users to download the advertised product. |
    | Playble Creative                     | Playable ads allow users to play a quick interactive demo of your game.                                                           |
    | Video Creative                       | Video creative is a video that is used for marketing your app.                                                                    |

    ## Resource IDs Used in the API Calls

    To identify your organization as well as its apps and campaigns we use the following identifiers:

    * **organizationId**: identifies your organization
    * **campaignSetId**: identifies your app (collection of campaigns) within your organization
    * **campaignId**: identifies a single advertising campaign within your app

    ### How to Look Up organizationId

    To look up the `organizationId`, please use the following steps:
    1. Open the [Acquire Dashboard](https://dashboard.unity3d.com/acquire)
    2. Select **Settings** from the navigation.
    3. On the settings page, you will see two separate Organization ID fields. For the Advertising Management API, pick
    the value from the `Organization Core ID` field.

    **Note**: The organizations are identified with two separate identifiers due to legacy reasons. The full name of the
    organization identifier used in the Advertising Management API is `Organization Core ID` but due to practical reasons
    it has been shortened to be `organizationId` in this API documentation.

    ### How to Look Up campaignSetId and campaignId

    To look up the `campaignSetId` and `campaignId`, the following options are available:

    Apps and their respective campaignSetIds can be retrieved using the [List Apps](#operation/advertise-listApps)
    endpoint. In the API response, the `id`-field holds the campaignSetId. Likewise, campaigns and their respective
    campaignIds can be retrieved using the [List Campaigns](#operation/advertise-listCampaigns) endpoint.

    The campaignSetId and campaignId identifiers are also available via the [Advertising Statistics API](https://unityads.unity3d.com/help/advertising/stats-api)
    where you can find them under the columns `campaign set id` and `campaign id`, respectively.

    It is also possible to find all the identifiers from the URLs of the Unity Acquire dashboard. First, open the
    [dashboard](https://dashboard.unity3d.com/acquire/) and then click **Apps** and choose an app and a campaign to view.
    After that the IDs are visible in the URL in following spots:
    `https://dashboard.unity3d.com/organizations/<ORGANIZATION_ID>/acquire/campaign-sets/<CAMPAIGN_SET_ID>/campaigns/<CAMPAIGN_ID>`

    ## Rate Limits

    The API has rate limiting in place. The maximum number of requests per IP address is limited to 6 requests per
    second and to 4000 requests per 30 minutes.

    Additionally all operations that modify resources (`PUT`, `PATCH`, `DELETE`) are limited so that it is possible to modify
    a single resource per endpoint at most 30 times per 30 minutes or at most once per a second. This means that for example
    the CPI bids of a single campaign can be updated at most 30 times inside a 30 minute time interval. The endpoints
    don't share the quota, so it is possible to do also other updates (e.g. source bids) to that same campaign during that
    same time interval.

    Similarly operations that create resources (`POST`) are limited so that it is possible to create at most 30 new
    resources per endpoint under a single app or campaign per 30 minutes or at most once per a second. This means that
    it is possible to for example upload at most 30 creatives into a single app within a 30 minute interval.
    During that same time window it is possible to also create other resources or apply updates to the campaigns that
    are under the app. Each endpoint has its own quota.

    If you need to update multiple campaigns fast, you can do that. It is for example possible to update CPI bids of hundreds
    of campaigns within a short time interval, as long as the number of requests stays in the overall bounds of max 6 requests
    per second and max 4000 requests per 30 minutes.

    The API responds with `429` HTTP status code if the rate limit is exceeded.

    **Quick Reference**

    | What is limited          |  How many requests are allowed per second  | How many requests are allowed per 30 minutes | Notes                                                                                                                                                                                                                                                              |
    |--------------------------|--------------------------------------------|----------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | All requests             | 6                                          | 4000                                         | Takes all requests into account.                                                                                                                                                                                                                                   |
    | `PUT`, `PATCH`, `DELETE` | 1                                          | 30                                           | Applied per `Budget`, `Campaign`, `Creative` or `Creative Pack` for each endpoint separately.                                                                                                                                                                      |
    | `POST`                   | 1                                          | 30                                           | Applied per `App` per endpoint for those resources that are directly under the `App` such as `Budgets` and `Campaigns`. If the resource in question is under `Campaign`, such as `Creative Pack Assignment` then the limit is applied per `Campaign` per endpoint. |

    ## Response Compression

    The API supports response compression. The responses are compressed if either `Accept-Encoding: gzip` or
    `Accept-Encoding: deflate` header is provided in the request.

    Example:
    ```
    curl -H "Authorization: Basic <SERVICE_ACCOUNT_CREDENTIALS>" -H "Accept-Encoding: gzip" https://services.api.unity.com/advertise/v1/organizations/5772680389521/apps/5ee23a52c10f9455722a5ead/campaigns/5ee23a557de7e87ee0958dfc/source-bids
    ```

    # Guides

    This section contains guides on how to use the API.

    ## Uploading and Assigning Creatives

    Creatives and creative packs are the content of your ad campaigns. This article covers the following steps:

    * [Overview](#section/Guides/Creatives/Overview)
    * [Step 1: Upload Your Creatives](#section/Guides/Creatives/Step1)
    * [Step 2: Create a Creative Pack](#section/Guides/Creatives/Step2)
    * [Step 3: Assign a Creative Pack to a Campaign](#section/Guides/Creatives/Step3)

    ### <a name="section/Guides/Creatives/Overview"></a>Overview

    The ad assets (files) such as videos, playables and end cards are managed using two concepts called
    `Creatives` and `Creative Packs`. Creatives directly hold your creative files while creative packs combine 1-3
    creatives into a pack that can be assigned to one or more campaigns.

    The process for creating and assigning creative packs to campaigns is as follows:

    ```mermaid
      graph LR
      Upload[Upload creatives] --> Pack[Create a creative pack] --> Assign[Assign the creative pack<br>to a campaign]
      classDef black fill:#000,color:#fff,stroke:#ddd,stroke-width:1px,line-height:21px;
      class Upload,Pack,Assign black
      click Upload "./advertise.html#operation/advertise-createCreative"
      click Pack "./advertise.html#operation/advertise-createCreativePack"
    ```

    ### <a name="section/Guides/Creatives/Step1"></a>Step 1: Upload Your Creatives

    You can upload your creatives by using the [Create Creative](#operation/advertise-createCreative) endpoint.

    The following creative assets can be uploaded currently through the API:

    * **Square end card**: this creative type contains a single square shaped 800â€‰Ã—â€‰800 image.
    * **End card pair**: this creative type contains a 600â€‰Ã—â€‰800 portrait image and a 800â€‰Ã—â€‰600 landscape image.
    * **Portrait video**: this creative type contains a 9:16 portrait video.
    * **Landscape video**: this creative type contains a 16:9 landscape video.
    * **Playable**: this creative type contains an MRAID 2.0 compliant HTML document in a landscape, portrait or responsive orientation. [See full playable guidelines](https://unityads.unity3d.com/help/advertising/campaign-design-guide#playables).

    Usually you call the `Create Creative` endpoint once for each file you wish to upload. The only exception to this is
    the end card pair creative which includes both portrait and landscape images in one creative.

    #### Upload a Video

    Below is an example how the upload endpoint can be called using the command line command `curl`. To try
    it out, replace the `/path/to/your/file/myPortraitVideo.mp4` with your local video file path and replace
    `<ORGANIZATION_ID>`, `<SERVICE_ACCOUNT_CREDENTIALS>` and `<CAMPAIGN_SET_ID>` with values matching your organization and app.

    ```
    curl --verbose \
         --form 'creativeInfo={"name": "My Portrait Video", "language": "en", "video": {"fileName":"myPortraitVideo.mp4"}}' \
         --form "videoFile=@/path/to/your/file/myPortraitVideo.mp4" \
         --header "Authorization: Basic <SERVICE_ACCOUNT_CREDENTIALS>" \
         https://services.api.unity.com/advertise/v1/organizations/<ORGANIZATION_ID>/apps/<CAMPAIGN_SET_ID>/creatives
    ```

    Once the upload has completed successfully, you will receive a HTTP `201` response with a response payload such as below:

    ```JSON
      {
        "id": "5fd363cf5d84aa0ed76956b1",
        "name": "My Portrait Video",
        "language": "en",
        "type": "portraitVideo",
        "createdAt": "2020-12-11T12:19:29.004Z",
        "status": "uploaded"
      }
    ```

    #### Upload a Square End Card

    Uploading a square end card works in similar fashion as uploading videos but you'll need to adjust the request
    in the following way:

    1. Adjust the `creativeInfo` to contain a `squareEndCard` field instead of a `video` field.
    2. Instead of passing the file in a `videoFile` field, pass the file in a field called `squareEndCardFile`.

    Example:
    ```
    curl --verbose \
         --form 'creativeInfo={"name":"My End Card", "language":"en", "squareEndCard": {"fileName":"mySquareEndCard.jpeg"}}' \
         --form "squareEndCardFile=@/path/to/your/file/mySquareEndCard.jpeg" \
         --header "Authorization: Basic <SERVICE_ACCOUNT_CREDENTIALS>" \
         https://services.api.unity.com/advertise/v1/organizations/<ORGANIZATION_ID>/apps/<CAMPAIGN_SET_ID>/creatives
    ```

    #### Upload an End Card Pair

    Uploading an end card pair works in similar fashion as uploading videos and square end card but you'll need to
    include both end card files in the request:

    ```
    curl --verbose \
       --form 'creativeInfo={"name":"My End Card Pair", "language":"en", "portraitEndCard": {"fileName":"myPortraitEndCard.jpeg" }, "landscapeEndCard": {"fileName":"myLandscapeEndCard.jpeg"}}' \
       --form "portraitEndCardFile=@/path/to/your/file/600x800.jpeg" \
       --form "landscapeEndCardFile=@/path/to/your/file/800x600.jpeg" \
       --header "Authorization: Basic <SERVICE_ACCOUNT_CREDENTIALS>" \
       https://services.api.unity.com/advertise/v1/organizations/<ORGANIZATION_ID>/apps/<CAMPAIGN_SET_ID>/creatives
    ```

    #### Creative Status

    After having been uploaded, all new creatives undergo a [content moderation process](https://unityads.unity3d.com/help/advertising/campaign-design-guide#moderating-creatives)
    to ensure that they adhere to Unity's advertising [content policies](https://unity3d.com/legal/advertising-content-policy).
    Before entering the moderation queue the video creatives go through a processing state that can take few minutes.

    You can check the latest status of the uploaded creative with [Get Creative](#operation/advertise-getCreative) endpoint.

    Creatives can be added into a creative pack immediately after they have been uploaded. It isn't necessary to
    wait for the moderation to complete. However, a creative pack can go live only after all its creatives have
    passed the moderation.

    ### <a name="section/Guides/Creatives/Step2"></a>Step 2: Create a Creative Pack

    Once you've uploaded your creatives, you can use [Create Creative Pack](#operation/advertise-createCreativePack)
    endpoint to create a creative pack out of them. A creative pack combines 1-3 creatives into one entity
    that can be assigned to one or more campaigns.

    The following creative combinations are allowed when creating a creative pack through the API:

    * Portrait video  + end card
    * Landscape video + end card
    * Portrait video  + landscape video + end card
    * Responsive playable
    * Portrait playable
    * Landscape playable
    * Portrait playable + landscape playable

    While only one video or playable is required, uploading one for each orientation yields better optimization.
    When a creative pack contains both, Unityâ€™s valuation algorithm selects the best orientation to display.

    Below is an example that creates a creative pack that contains one portrait video (with ID `5fd363cf5d84aa0ed76956b1`)
    and one square end card (with ID `5feb40a6ff3d91a3af53c678`):

    ```
    curl --verbose \
         --request POST \
         --data '{"name": "Portrait video with square end card", "creativeIds": ["5fd363cf5d84aa0ed76956b1", "5feb40a6ff3d91a3af53c678"], "type": "video"}' \
         --header "Content-Type: application/json" \
         --header "Authorization: Basic <SERVICE_ACCOUNT_CREDENTIALS>" \
         https://services.api.unity.com/advertise/v1/organizations/<ORGANIZATION_ID>/apps/<CAMPAIGN_SET_ID>/creative-packs
    ```

    Replace the `creativeIds`, `<ORGANIZATION_ID>`, `<CAMPAIGN_SET_ID>` and `<SERVICE_ACCOUNT_CREDENTIALS>` with values that match your app and organization.

    For a successful request, the response HTTP status code is `201` and the response body follows following format:

    ```JSON
    {
      "id": "5feb4574ff3d91a3af53c67e",
      "name": "Video with end card",
      "type": "video",
      "creativeIds": [
          "5fd363cf5d84aa0ed76956b1",
          "5feb40a6ff3d91a3af53c678"
      ]
    }
    ```

    ### <a name="section/Guides/Creatives/Step3"></a>Step 3: Assign a Creative Pack to a Campaign

    To assign a creative pack to your campaign, use the <a href="#operation/advertise-assignCreativePack">assign Creative Pack endpoint</a>.

    If your creative pack's ID is for example `5f15703772f10b00138f6d8d`, you can assign it to your campaign with a POST
    request:

    ```
    curl --verbose \
         --request POST \
         --data '{"id": "5f15703772f10b00138f6d8d"}' \
         --header "Content-Type: application/json" \
         --header "Authorization: Basic <SERVICE_ACCOUNT_CREDENTIALS>" \
         https://services.api.unity.com/advertise/v1/organizations/<ORGANIZATION_ID>/apps/<CAMPAIGN_SET_ID>/campaigns/<CAMPAIGN_ID>/assigned-creative-packs
    ```

    The currently assigned creative packs can be listed with a GET query:

    ```
    curl --header "Authorization: Basic <SERVICE_ACCOUNT_CREDENTIALS>" \
         https://services.api.unity.com/advertise/v1/organizations/<ORGANIZATION_ID>/apps/<CAMPAIGN_SET_ID>/campaigns/<CAMPAIGN_ID>/assigned-creative-packs
    ```

    The response contains a list of creative pack IDs.

    A campaign must contain at least one approved creative pack in order to go live. If your live campaign includes a
    mix of approved and pending creative packs, the pending ones will automatically run once approved.

    To unassign a creative pack from a campaign, use the <a href="#operation/advertise-unassignCreativePack">unassign Creative Pack endpoint</a>.

    You can unassign a creative pack with a DELETE query that includes the creative pack's ID in the URL:

    ```
    curl --verbose \
         --request DELETE \
         --header "Authorization: Basic <SERVICE_ACCOUNT_CREDENTIALS>" \
         https://services.api.unity.com/advertise/v1/organizations/<ORGANIZATION_ID>/apps/<CAMPAIGN_SET_ID>/campaigns/<CAMPAIGN_ID>/assigned-creative-packs/<ASSIGNED_CREATIVE_PACK_ID>
    ```

servers:
  - url: https://services.api.unity.com
    description: Production server

tags:
  - name: Apps
    description: Manage your Apps with these APIs.
  - name: Bids
    description: |
      Manage bids and source bids for your CPI campaigns with these APIs.

      To make bulk bid changes to large campaigns without code, explore the new beta feature, [Bulk campaign management with spreadsheets](https://unityads.unity3d.com/help/advertising/configuring-campaigns#bulk-campaign-management).

      <div style="background-color: #1a1a1a; color: white; padding: 1em; padding-top: 0.1em; font-size: 0.95em;">
        <h4>Note about iOS Campaigns</h4>

        All campaigns are now billed by Cost per Impression (CPM).

        This is a billing method where you are charged based on the total number of impressions your campaign receives.
        This means that CPI campaigns are now [target CPI campaigns](https://unityads.unity3d.com/help/advertising/advertising#what-is-target-cpi-)
        while your campaign optimization goals, such as Installs, ROAS or Retention, do not change. You can learn more
        about this billing type [here](https://unityads.unity3d.com/help/advertising/advertising#what-is-cost-per-impression-billing-).

        Bids are now Target CPI (tCPI) bids, the average amount you wish to pay per install. Target CPI is a bidding
        strategy that sets bids to help you get as many conversions as possible within a tight range of the target
        cost-per-install you set. This strategy automatically optimizes bidding for your ad each time it is eligible to
        appear. Target CPI (tCPI) bids are set the same way as CPI bids via APIs.
      </div>

  - name: Campaigns
    description: | 
      Manage your advertisement campaigns with these APIs.

      To make bulk changes to large campaigns without code, explore the new beta feature, [Bulk campaign management with spreadsheets](https://unityads.unity3d.com/help/advertising/configuring-campaigns#bulk-campaign-management).

  - name: Creatives
    description: |
      Manage your creatives (files) such as videos and end cards with these APIs.

      Besides the endpoint documentation that is found here, you can also check the
      <a href="https://unityads.unity3d.com/help/advertising/campaign-design-guide" target="_blank">Unity Ads knowledge base</a>
      for further documentation about creatives and creative packs.
  - name: Creative Packs
    description: |
      Manage your creative packs with these APIs.

      Besides the endpoint documentation that is found here, you can also check the
      <a href="https://unityads.unity3d.com/help/advertising/campaign-design-guide" target="_blank">Unity Ads knowledge base</a>
      for further documentation about creatives and creative packs.
  - name: Budgets
    description: |
      Manage your campaign budgets with these APIs.

      Your campaign budget dictates how much marketing spend your campaigns could consume.

      A budget is first created and then assigned to the desired campaigns. If a budget is assigned to multiple campaigns
      then all of those campaigns consume that same budget. By default a campaign does not have a budget assigned to it,
      meaning that by default a campaign has an **unlimited** budget.

      Budget has an overall limit for marketing spend of a campaign and it can also have a daily cap.

      Unity recommends a minimum campaign budget of $2,000 and a daily budget of $500 per country. Campaigns with less
      than $1000 total budget and $500 daily limit per country might not get any exposure due to budget restrictions.

      Having a low daily limit might result in overspend during the first few days, as the system might not be able to
      accurately predict the performance of your campaign.

      **Note**: The budget limit serves as a rough estimate. Unity does not guarantee to invoice you according to the
      budget limit amount.

      <div style="background-color: #b38629; color: white; padding: 1em; padding-top: 1em; font-size: 1em;">
        Support for shared budgets will be removed in Fall 2022. If you are sharing budgets between any campaigns, please consider moving to using a single budget per campaign. You can do so by creating a new budget for the campaign. Note that some features may not be available for campaigns using shared budgets.
      </div>

x-tagGroups:
  - name: Endpoints
    tags:
      - Apps
      - Bids
      - Budgets
      - Campaigns
      - Creatives
      - Creative Packs

security:
  - Authentication: []

x-advertiseErrorResponses: &errorResponses
  '400':
    $ref: 'https://services.docs.unity.com/base.yaml#/components/responses/ValidationError.v1'
  '401':
    $ref: 'https://services.docs.unity.com/base.yaml#/components/responses/AuthenticationError.v1'
  '403':
    $ref: 'https://services.docs.unity.com/base.yaml#/components/responses/AuthorizationError.v1'
  '404':
    $ref: 'https://services.docs.unity.com/base.yaml#/components/responses/NotFoundError.v1'
  '429':
    $ref: 'https://services.docs.unity.com/base.yaml#/components/responses/TooManyRequestsError.v1'
  '500':
    $ref: 'https://services.docs.unity.com/base.yaml#/components/responses/InternalServerError.v1'
  '503':
    $ref: 'https://services.docs.unity.com/base.yaml#/components/responses/ServiceUnavailableError.v1'

paths:
  /advertise/v1/organizations/{organizationId}/apps/{campaignSetId}:
    parameters:
      - $ref: '#/components/parameters/advertise.organizationCoreId'
      - $ref: '#/components/parameters/advertise.campaignSetId'
    get:
      summary: Get App
      description: |
        This endpoint returns the app information for a given app ID.
      operationId: advertise-getApp
      tags:
        - Apps
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.app'
        <<: *errorResponses
    patch:
      summary: Update App
      description: |
        This endpoint is used to update an App.

        **Note**: this endpoint supports partial updates.
      operationId: advertise-updateApp
      tags:
        - Apps
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/advertise.updateAppRequestBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.app'
        <<: *errorResponses
    delete:
      summary: Delete App
      description: |
        This endpoint is used to delete an App.

        **Note:** all campaigns, bids and creative packs belonging to the app will also be deleted. Deleted apps cannot be recovered.
      operationId: advertise-deleteApp
      tags:
        - Apps
      responses:
        '204':
          description: No Content 
        <<: *errorResponses

  /advertise/v1/organizations/{organizationId}/apps:
    get:
      parameters:
        - $ref: '#/components/parameters/advertise.organizationCoreId'
        - $ref: '#/components/parameters/advertise.offset'
        - $ref: '#/components/parameters/advertise.appsLimit'
        - name: filter
          in: query
          style: deepObject
          explode: true
          allowReserved: true
          description: |
            List of filters in the format `filter[key]=value&filter[key2]=value2`.
            Currently we only support filtering by the store and storeId with `filter[storeId]=com.store.id&filter[store]=google`.
          schema:
            type: object
            additionalProperties: false
            properties:
              store:
                $ref: '#/components/schemas/advertise.store'
              storeId:
                $ref: '#/components/schemas/advertise.storeId'
      summary: List Apps
      description: |
        This endpoint returns all available apps
      operationId: advertise-listApps
      tags:
        - Apps
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.appsResponseBody'
        <<: *errorResponses
    post:
      parameters:
        - $ref: '#/components/parameters/advertise.organizationCoreId'
      summary: Create App
      description: |
        This endpoint creates a new app
      operationId: advertise-createApp
      tags:
        - Apps
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/advertise.createAppRequestBody'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.app'
        <<: *errorResponses

  /advertise/v1/organizations/{organizationId}/apps/{campaignSetId}/budgets:
    parameters:
      - $ref: '#/components/parameters/advertise.organizationCoreId'
      - $ref: '#/components/parameters/advertise.campaignSetId'
    get:
      summary: List Budgets
      description: This endpoint lists campaign budgets for a single app
      operationId: advertise-listBudgets
      tags:
        - Budgets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.budgetsResponseBody'
        <<: *errorResponses
    post:
      summary: Create Budget
      description: |
        This endpoint is used to create campaign budget.

        <div style="background-color: #b38629; color: white; padding: 1em; padding-top: 1em; font-size: 1em;">
          Support for shared budgets will be removed in Fall 2022. If you are sharing budgets between any campaigns, please consider moving to using a single budget per campaign. You can do so by creating a new budget for the campaign. Note that some features may not be available for campaigns using shared budgets.
        </div>
      operationId: advertise-createBudget
      tags:
        - Budgets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/advertise.createBudgetRequestBody'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.budget'
        <<: *errorResponses

  /advertise/v1/organizations/{organizationId}/apps/{campaignSetId}/budgets/{budgetId}:
    parameters:
      - $ref: '#/components/parameters/advertise.organizationCoreId'
      - $ref: '#/components/parameters/advertise.campaignSetId'
      - $ref: '#/components/parameters/advertise.budgetId'
    get:
      summary: Get Budget
      description: This endpoint returns the campaign budget information for a given budget id.
      operationId: advertise-getBudget
      tags:
        - Budgets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.budget'
        <<: *errorResponses
    patch:
      summary: Update Budget
      description: |
        This endpoint is used to update campaign budget.

        **Note**: this endpoint supports partial updates. The payload can contain, for example, only a new value for the
        `total` limit.
      operationId: advertise-updateBudget
      tags:
        - Budgets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/advertise.updateBudgetRequestBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.updateBudgetsResponseBody'
        <<: *errorResponses

  /advertise/v1/organizations/{organizationId}/apps/{campaignSetId}/campaigns/{campaignId}/assigned-budget:
    parameters:
      - $ref: '#/components/parameters/advertise.organizationCoreId'
      - $ref: '#/components/parameters/advertise.campaignSetId'
      - $ref: '#/components/parameters/advertise.campaignId'
    get:
      summary: Get Assigned Budget
      description: |
        This endpoint returns the budget assigned to a given campaign.

        **Note**: you can also use the <a href="#operation/advertise-listBudgets">list Budgets</a> endpoint
        to check which budgets are currently assigned to which campaigns.
      operationId: advertise-getAssignedBudget
      tags:
        - Budgets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.assignedBudgetResponseBody'
        <<: *errorResponses
    put:
      summary: Assign Budget
      description: |
        This endpoint is used for assigning a budget to a campaign. This endpoint can also be used for changing a
        previously assigned budget to another budget.

        To unassign a budget from a campaign, use the <a href="#operation/advertise-unassignBudget">unassign budget endpoint</a>.

        <div style="background-color: #b38629; color: white; padding: 1em; padding-top: 1em; font-size: 1em;">
          Support for shared budgets will be removed in Fall 2022. If you are sharing budgets between any campaigns, please consider moving to using a single budget per campaign. You can do so by creating a new budget for the campaign. Note that some features may not be available for campaigns using shared budgets.
        </div>
      operationId: advertise-replaceAssignedBudget
      tags:
        - Budgets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/advertise.assignedBudgetRequestBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.assignedBudgetResponseBody'
        <<: *errorResponses
    delete:
      summary: Unassign Budget
      description: |
        This endpoint is used to unassign the current budget of a campaign.
      operationId: advertise-unassignBudget
      tags:
        - Budgets
      responses:
        '204':
          description: No Content
        <<: *errorResponses

  /advertise/v1/organizations/{organizationId}/apps/{campaignSetId}/creatives:
    parameters:
      - $ref: '#/components/parameters/advertise.organizationCoreId'
      - $ref: '#/components/parameters/advertise.campaignSetId'
    get:
      summary: List Creatives
      description: |
        This endpoint returns all available creatives that are under the given app.
      operationId: advertise-listCreatives
      tags:
        - Creatives
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.creativesResponseBody'
        <<: *errorResponses
    post:
      summary: Create Creative
      description: |
        Upload an end card or video creative using this endpoint.

        Three different types of creatives can currently be created through this API:

        * **Square end card**:  a single square shaped 800â€‰Ã—â€‰800 image.
        * **End card pair**:  a 600â€‰Ã—â€‰800 portrait image and a 800â€‰Ã—â€‰600 landscape image.
        * **Video**:  contains either a 9:16 portrait video or a 16:9 landscape video.
        * **Playable**: contains an MRAID 2.0 compliant HTML document in a portrait, landscape or responsive orientation. [See full playable guidelines](https://unityads.unity3d.com/help/advertising/campaign-design-guide#playables).

        Each creative type requires a slightly different JSON payload and a different set of binary files:

        * one image file for a square end card,
        * two image files for an end card pair,
        * one video file for a video creative.
        * one HTML file for a playable creative.

        To create a creative, you will need to send a HTTP request with content type of `multipart/form-data`
        to the API endpoint. The first part of the multipart form should contain a field named `creativeInfo` that
        contains JSON metadata about the creative, followed by one or more additional parts containing the binary
        data for each creative file.

        **Example**

        For a square end card the raw HTTP request could look for example following:
        ```
        POST /advertise/v1/organizations/<ORGANIZATION_ID>/apps/<CAMPAIGN_SET_ID>/creatives HTTP/1.1
        Host: services.api.unity.com:443
        Authorization: Basic <SERVICE_ACCOUNT_CREDENTIALS>
        Content-Type: multipart/form-data; boundary=--------------------------371131627955007232942795
        Content-Length: 51165
        ----------------------------371131627955007232942795
        Content-Disposition: form-data; name="creativeInfo"
        Content-Type: application/json

        {
          "name": "My Creative",
          "language": "en",
          "squareEndCard": {
            "fileName": "myCreative.jpeg"
          }
        }
        ----------------------------371131627955007232942795
        Content-Disposition: form-data; name="squareEndCardFile"; filename="myCreative.jpeg"

        <IMAGE_BINARY_DATA>
        ----------------------------371131627955007232942795--
        ```

        Notice that the place holders `<ORGANIZATION_ID>`, `<CAMPAIGN_SET_ID>`, `<SERVICE_ACCOUNT_CREDENTIALS>` and `<IMAGE_BINARY_DATA>` need to be replaced with valid values.

        When uploading creative assets, please observe Unityâ€™s advertising content policy. [Read more](https://unity3d.com/legal/advertising-content-policy)

        A continuous data flow is expected when uploading the file. The creative upload is allowed to take at most 5 minutes.
        This means that if you are creating a creative that contains a video that has the maximum file size of 100 MB then your average upload speed must at least 2.7 Mbps.
        If the upload takes longer than 5 minutes then the request will fail.  If the upload halts (no bytes are transferred) for over 30 seconds then the request will fail.

        If the same files have already been uploaded as part of a previous creative, the existing creative is returned and no new one is created.

      operationId: advertise-createCreative
      tags:
        - Creatives
      requestBody:
        description: OK
        content:
          multipart/form-data:
            schema:
              oneOf:
                - $ref: '#/components/schemas/advertise.creativeSquareEndCardRequestBody'
                - $ref: '#/components/schemas/advertise.creativePairEndCardRequestBody'
                - $ref: '#/components/schemas/advertise.creativeVideoRequestBody'
                - $ref: '#/components/schemas/advertise.creativePlayableRequestBody'
            encoding:
              creativeInfo:
                contentType: application/json
              squareEndCardFile:
                contentType: image/*
              portraitEndCardFile:
                contentType: image/*
              landscapeEndCardFile:
                contentType: image/*
              videoFile:
                contentType: video/*
              playableFile:
                contentType: text/html

      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.creative'
        '413':
          $ref: 'https://services.docs.unity.com/base.yaml#/components/responses/PayloadTooLargeError.v1'
        '504':
          $ref: 'https://services.docs.unity.com/base.yaml#/components/responses/GatewayTimeoutError.v1'
        <<: *errorResponses

  /advertise/v1/organizations/{organizationId}/apps/{campaignSetId}/creatives/{creativeId}:
    parameters:
      - $ref: '#/components/parameters/advertise.organizationCoreId'
      - $ref: '#/components/parameters/advertise.campaignSetId'
      - $ref: '#/components/parameters/advertise.creativeId'
    get:
      summary: Get Creative
      description: |
        This endpoint returns a creative by the creative ID and campaign set ID.
      operationId: advertise-getCreative
      tags:
        - Creatives
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.creative'
        <<: *errorResponses

  /advertise/v1/organizations/{organizationId}/apps/{campaignSetId}/creative-packs:
    parameters:
      - $ref: '#/components/parameters/advertise.organizationCoreId'
      - $ref: '#/components/parameters/advertise.campaignSetId'
    get:
      summary: List Creative Packs
      description: |
        This endpoint returns creative packs that are under the given app.
      operationId: advertise-listCreativePacks
      tags:
        - Creative Packs
      parameters:
        - $ref: '#/components/parameters/advertise.offset'
        - $ref: '#/components/parameters/advertise.creativePacksLimit'
        - name: filter
          in: query
          style: deepObject
          explode: true
          allowReserved: true
          description: List of filters in the format `filter[key]=value&filter[key2]=value2`. Currently we only support filtering by the creative pack name with `filter[name]=*name*filter*`.
          schema:
            type: object
            additionalProperties: false
            properties:
              name:
                type: string
                minLength: 1
                example: some*name
                description: Filter the creative packs by name. Allows using wildcards, such as `?filter[name]=*video*`.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.creativePacksResponseBody'
        <<: *errorResponses
    post:
      summary: Create Creative Pack
      description: |
        Create a creative pack using this endpoint.

        Three different types of creative packs can be currently created through this API:

        * **video**: this creative pack type contains a single end card creative (square end card or end card pair) and one or two video creatives (one end card + 1-2 videos).
        * **playable**: this creative pack type contains one or two playable creatives.
        * **video and playable**: this creative pack type contains one or two video creatives and a single responsive playable.

        Each creative pack type requires different `creativeIds` which have to match with the given creative pack type.
        If the creatives referenced by the `creativeIds` do not match with the creative pack's `type` then the API
        will respond with `400` bad request.

        Available creatives for your app can be listed via <a href="#operation/advertise-listCreatives">list Creatives</a> endpoint.
      operationId: advertise-createCreativePack
      tags:
        - Creative Packs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/advertise.createCreativePackRequestBody'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.creativePack'
        <<: *errorResponses

  /advertise/v1/organizations/{organizationId}/apps/{campaignSetId}/creative-packs/{creativePackId}:
    parameters:
      - $ref: '#/components/parameters/advertise.organizationCoreId'
      - $ref: '#/components/parameters/advertise.campaignSetId'
      - $ref: '#/components/parameters/advertise.creativePackId'
    get:
      summary: Get Creative Pack
      description: |
        This endpoint returns a creative pack by the creative pack ID and campaign set ID.
      operationId: advertise-getCreativePack
      tags:
        - Creative Packs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.creativePack'
        <<: *errorResponses
    delete:
      summary: Delete Creative Pack
      description: |
        This endpoint removes a creative pack by the creative pack ID and campaign set ID.
      operationId: advertise-deleteCreativePack
      tags:
        - Creative Packs
      responses:
        '204':
          description: No Content
        <<: *errorResponses

  /advertise/v1/organizations/{organizationId}/apps/{campaignSetId}/campaigns:
    parameters:
      - $ref: '#/components/parameters/advertise.organizationCoreId'
      - $ref: '#/components/parameters/advertise.campaignSetId'
    get:
      summary: List Campaigns
      description: This endpoint returns campaigns for the given app.
      operationId: advertise-listCampaigns
      tags:
        - Campaigns
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.campaignsResponseBody'
        <<: *errorResponses
    post:
      summary: Create Campaign
      description: |
        This endpoint is used to create a campaign.

        In order to complete the campaign setup, take the following steps:
          1. You can <a href="#operation/advertise-createCreative">Upload Creatives</a> or use the old ones if you already have uploaded them.
          2. You can <a href="#operation/advertise-createCreativePack">Create Creative Pack</a> or use any approved creative pack you already have.
          3. You should <a href="#operation/advertise-assignCreativePack">Assign Creative Pack</a> to the campaign.
          4. Depending on the `goal` of your campaign you need to update CPI/ROAS/Retention bids by calling the right <a href="#tag/Bids">Bids endpoint</a>.
          5. Finally if you prepared all requirements you can change the `enabled` status by calling the <a href="#operation/advertise-updateCampaign">Update Campaign</a> endpoint.

        **Note**: The campaign must have the below prerequisites to go live:
          - At least one assigned and approved creative pack.
          - Tracking attribution links.
          - Specify countries you would like to advertise in.
          - The organization is required to have a budget and also, you can optionally <a href="#operation/advertise-createBudget">create</a> and <a href="#operation/advertise-replaceAssignedBudget">assign</a> the campaign-level budget.

        **Note**: Creating an iOS Campaign with CPI Billing type is not publicly available yet. If you want to try this feature, please reach out to your Unity partner or message us at unityads-support@unity3d.com.

      operationId: advertise-createCampaign
      tags:
        - Campaigns
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/advertise.createCampaignRequestBody'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.createdCampaignResponseBody'
        <<: *errorResponses

  /advertise/v1/organizations/{organizationId}/apps/{campaignSetId}/campaigns/{campaignId}:
    parameters:
      - $ref: '#/components/parameters/advertise.organizationCoreId'
      - $ref: '#/components/parameters/advertise.campaignSetId'
      - $ref: '#/components/parameters/advertise.campaignId'
    get:
      summary: Get Campaign
      description: This endpoint returns the campaign information for a given campaign id.
      operationId: advertise-getCampaign
      tags:
        - Campaigns
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.campaignResponseBody'
        <<: *errorResponses
    patch:
      summary: Update Campaign
      description: |
        This endpoint is used to update a campaign.

        **Note**: this endpoint supports partial updates. The payload can contain, for example, only a new value for the `enabled` field.
      operationId: advertise-updateCampaign
      tags:
        - Campaigns
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/advertise.updateCampaignRequestBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.updatedCampaignResponseBody'
        <<: *errorResponses
    delete:
      summary: Delete Campaign
      description: |
        This endpoint is used to delete a campaign.
      operationId: advertise-deleteCampaign
      tags:
        - Campaigns
      responses:
        '204':
          description: No Content
        <<: *errorResponses

  /advertise/v1/organizations/{organizationId}/apps/{campaignSetId}/campaigns/{campaignId}/assigned-creative-packs:
    parameters:
      - $ref: '#/components/parameters/advertise.organizationCoreId'
      - $ref: '#/components/parameters/advertise.campaignSetId'
      - $ref: '#/components/parameters/advertise.campaignId'
    get:
      summary: List Assigned Creative Packs
      description: |
        This endpoint returns creative packs that are assigned to a campaign.

        **Note**: you can also use the <a href="#operation/advertise-listCreativePacks">list Creative Packs</a> endpoint
        to check which creative packs are currently assigned to which campaigns.
      operationId: advertise-listAssignedCreativePacks
      tags:
        - Campaigns
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.assignedCreativePacksResponseBody'
        <<: *errorResponses
    post:
      summary: Assign Creative Pack
      description: |
        Assign a creative pack to a campaign.

        <div style="background-color: #1a1a1a; color: white; padding: 1em; padding-top: 0.1em; font-size: 0.95em;">
          <h4>Note about iOS Campaigns</h4>

          Please note that there is a limit of 50 creative pack assignments in apps sharing the same store id that you
          can use on your live campaigns for iOS apps. You can find more information about this limit
          <a href="https://resources.unity.com/ios-14-resources/campaign-management-best-practices#5-limit-campaigns" target="_blank">here</a>.
        </div>
      operationId: advertise-assignCreativePack
      tags:
        - Campaigns
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/advertise.assignCreativePackRequestBody'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.assignedCreativePack'
        <<: *errorResponses

  /advertise/v1/organizations/{organizationId}/apps/{campaignSetId}/campaigns/{campaignId}/assigned-creative-packs/{assignedCreativePackId}:
    parameters:
      - $ref: '#/components/parameters/advertise.organizationCoreId'
      - $ref: '#/components/parameters/advertise.campaignSetId'
      - $ref: '#/components/parameters/advertise.campaignId'
      - $ref: '#/components/parameters/advertise.assignedCreativePackId'
    delete:
      summary: Unassign Creative Pack
      description: |
        Unassign a creative pack from a campaign.
      operationId: advertise-unassignCreativePack
      tags:
        - Campaigns
      responses:
        '204':
          description: No Content
        <<: *errorResponses

  /advertise/v1/organizations/{organizationId}/apps/{campaignSetId}/campaigns/{campaignId}/cpi-bids:
    parameters:
      - $ref: '#/components/parameters/advertise.organizationCoreId'
      - $ref: '#/components/parameters/advertise.campaignSetId'
      - $ref: '#/components/parameters/advertise.campaignId'
    get:
      summary: List CPI Bids
      description: |
        This endpoint returns campaign's CPI bids.
        <div style="background-color: #1a1a1a; color: white; padding: 1em; padding-top: 0.1em; font-size: 0.95em;">
          <h4>Note about iOS Campaigns</h4>

          CPI campaigns are now target CPI campaigns while your campaign optimization goals,
          such as Installs, ROAS or Retention, do not change.

          Bids are now Target CPI (tCPI) bids, the average amount you wish to pay per install. Target CPI is a
          bidding strategy that sets bids to help you get as many conversions as possible within a tight range of the
          target cost-per-install you set. This strategy automatically optimizes bidding for your ad each time it is
          eligible to appear. Target CPI (tCPI) bids are set the same way as CPI bids via APIs.
        </div>
      operationId: advertise-listCpiBids
      tags:
        - Bids
      responses:
        '200':
          description: List of CPI bids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.cpiBidsResponseBody'
        <<: *errorResponses
    put:
      summary: Update CPI Bids
      description: |
        This endpoint is used to replace a campaign's CPI bids with a new set of bids.

        To remove all the CPI bids of a campaign, send an empty array in the request body.

        <div style="background-color: #1a1a1a; color: white; padding: 1em; padding-top: 0.1em; font-size: 0.95em;">
          <h4>Note about iOS Campaigns</h4>

          CPI campaigns are now target CPI campaigns while your campaign optimization goals,
          such as Installs, ROAS or Retention, do not change.

          Bids are now Target CPI (tCPI) bids, the average amount you wish to pay per install. Target CPI is a
          bidding strategy that sets bids to help you get as many conversions as possible within a tight range of the
          target cost-per-install you set. This strategy automatically optimizes bidding for your ad each time it is
          eligible to appear. Target CPI (tCPI) bids are set the same way as CPI bids via APIs.
        </div>
      operationId: advertise-replaceCpiBids
      tags:
        - Bids
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/advertise.cpiBidsRequestBody'
      responses:
        '200':
          description: Successfully updated the CPI bids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.cpiBidsResponseBody'
        <<: *errorResponses

  /advertise/v1/organizations/{organizationId}/apps/{campaignSetId}/campaigns/{campaignId}/source-bids:
    parameters:
      - $ref: '#/components/parameters/advertise.organizationCoreId'
      - $ref: '#/components/parameters/advertise.campaignSetId'
      - $ref: '#/components/parameters/advertise.campaignId'
    get:
      summary: List Source Bids
      description: |
        This endpoint returns a campaign's source bids.

        <div style="background-color: #1a1a1a; color: white; padding: 1em; padding-top: 0.1em; font-size: 0.95em;">
          <h4>Note about iOS Campaigns</h4>

          CPI campaigns are now target CPI campaigns while your campaign optimization goals,
          such as Installs, ROAS or Retention, do not change.

          Bids are now Target CPI (tCPI) bids, the average amount you wish to pay per install. Target CPI is a bidding
          strategy that sets bids to help you get as many conversions as possible within a tight range of the target
          cost-per-install you set. This strategy automatically optimizes bidding for your ad each time it is eligible to
          appear. Target CPI (tCPI) bids are set the same way as CPI bids via APIs.
        </div>
      operationId: advertise-listSourceBids
      tags:
        - Bids
      responses:
        '200':
          description: List of source bids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.sourceBidsResponseBody'
        <<: *errorResponses
    put:
      summary: Update Source Bids
      description: |
        This endpoint is used to replace a campaign's source bids with a new set of source bids.

        To remove all source bids of a campaign, send an empty array in the request body.

        <div style="background-color: #1a1a1a; color: white; padding: 1em; padding-top: 0.1em; font-size: 0.95em;">
          <h4>Note about iOS Campaigns</h4>

          CPI campaigns are now target CPI campaigns while your campaign optimization goals,
          such as Installs, ROAS or Retention, do not change.

          Bids are now Target CPI (tCPI) bids, the average amount you wish to pay per install. Target CPI is a bidding
          strategy that sets bids to help you get as many conversions as possible within a tight range of the target
          cost-per-install you set. This strategy automatically optimizes bidding for your ad each time it is eligible to
          appear. Target CPI (tCPI) bids are set the same way as CPI bids via APIs.
        </div>
      operationId: advertise-replaceSourceBids
      tags:
        - Bids
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/advertise.sourceBidsRequestBody'
      responses:
        '200':
          description: Successfully updated the source bids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.sourceBidsResponseBody'
        <<: *errorResponses

  /advertise/v1/organizations/{organizationId}/apps/{campaignSetId}/campaigns/{campaignId}/targeting:
    parameters:
      - $ref: '#/components/parameters/advertise.organizationCoreId'
      - $ref: '#/components/parameters/advertise.campaignSetId'
      - $ref: '#/components/parameters/advertise.campaignId'
    get:
      summary: Get targeting options
      description: |
        This endpoint returns the targeting options for a certain campaign.

      operationId: advertise-getTargeting
      tags:
        - Campaigns
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.getTargetingResponseBody'
        <<: *errorResponses
    patch:
      summary: Update targeting options
      description: |
        This endpoint is used to update targeting options.

        **Note**: this endpoint supports partial updates. The payload can contain, for example, only a new value for the
        `appTargeting` option.
      operationId: advertise-updateTargeting
      tags:
        - Campaigns
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/advertise.updateTargetingRequestBody'
      responses:
        '200':
          description: targeting options
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.updateTargetingResponseBody'
        <<: *errorResponses

  /advertise/v1/organizations/{organizationId}/apps/{campaignSetId}/audience-pinpointer/roas-info:
    parameters:
      - $ref: '#/components/parameters/advertise.organizationCoreId'
      - $ref: '#/components/parameters/advertise.campaignSetId'
    get:
      summary: List ROAS Eligibility
      description: |
        This endpoint returns information about which countries are currently eligible to be used in the Return On Ad Spend (ROAS) campaigns
        and additional ROAS-related information.

        For further information about ROAS bidding, please see the
        <a href="https://unityads.unity3d.com/help/advertising/audience-pinpointer" target="_blank">Unity Ads knowledge base</a>.
      operationId: advertise-listRoasInfo
      tags:
        - Bids
      responses:
        '200':
          description: List of countries and ROAS information for those countries that are eligible for ROAS campaigns.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.roasInfoResponseBody'
        <<: *errorResponses

  /advertise/v1/organizations/{organizationId}/apps/{campaignSetId}/campaigns/{campaignId}/roas-bids:
    parameters:
      - $ref: '#/components/parameters/advertise.organizationCoreId'
      - $ref: '#/components/parameters/advertise.campaignSetId'
      - $ref: '#/components/parameters/advertise.campaignId'
    get:
      summary: List ROAS Bids
      description: |
        This endpoint returns campaign's ROAS (Return On Ad Spend) bids.

        For further information about ROAS bidding, please see the
        <a href="https://unityads.unity3d.com/help/advertising/audience-pinpointer" target="_blank">Unity Ads knowledge base</a>.
      operationId: advertise-listRoasBids
      tags:
        - Bids
      responses:
        '200':
          description: List of ROAS bids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.roasBidsResponseBody'
        <<: *errorResponses
    put:
      summary: Update ROAS Bids
      description: |
        This endpoint is used to replace campaign's ROAS (Return on Ad Spend) bids with a new set of ROAS bids.

        ROAS bids can be set only for eligible countries. Use the <a href="#operation/advertise-listRoasInfo">list ROAS
        information</a> endpoint to check for which countries your app is currently eligible and what are the recommended ROAS
        goals for those countries. Further details about ROAS bidding and the eligibility criteria can be found from the
        <a href="https://unityads.unity3d.com/help/advertising/audience-pinpointer" target="_blank">Unity Ads knowledge base</a>.
      operationId: advertise-replaceRoasBids
      tags:
        - Bids
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/advertise.roasBidsRequestBody'
      responses:
        '200':
          description: List of ROAS bids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.roasBidsResponseBody'
        <<: *errorResponses

  /advertise/v1/organizations/{organizationId}/apps/{campaignSetId}/audience-pinpointer/retention-info:
    parameters:
      - $ref: '#/components/parameters/advertise.organizationCoreId'
      - $ref: '#/components/parameters/advertise.campaignSetId'
    get:
      summary: List Retention Eligibility
      description: |
        This endpoint returns information about which countries are currently available to be used in the Retention campaigns.

        For further information about retention bidding, please see the
        <a href="https://unityads.unity3d.com/help/advertising/audience-pinpointer" target="_blank">Unity Ads knowledge base</a>.
      operationId: advertise-listRetentionInfo
      tags:
        - Bids
      responses:
        '200':
          description: List of eligible countries for Retention campaigns.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.retentionInfoResponseBody'
        <<: *errorResponses

  /advertise/v1/organizations/{organizationId}/apps/{campaignSetId}/campaigns/{campaignId}/retention-bids:
    parameters:
      - $ref: '#/components/parameters/advertise.organizationCoreId'
      - $ref: '#/components/parameters/advertise.campaignSetId'
      - $ref: '#/components/parameters/advertise.campaignId'
    get:
      summary: List Retention Bids
      description: |
        This endpoint returns campaign's retention bids.

        For further information about retention bidding, please see the
        <a href="https://unityads.unity3d.com/help/advertising/audience-pinpointer" target="_blank">Unity Ads knowledge base</a>.
      operationId: advertise-listRetentionBids
      tags:
        - Bids
      responses:
        '200':
          description: List of retention bids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.retentionBidsResponseBody'
        <<: *errorResponses
    put:
      summary: Update Retention Bids
      description: |
        This endpoint is used to replace campaign's retention bids with a new set of retention bids.

        For further information about retention bidding, please see the
        <a href="https://unityads.unity3d.com/help/advertising/audience-pinpointer" target="_blank">Unity Ads knowledge base</a>.
      operationId: advertise-replaceRetentionBids
      tags:
        - Bids
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/advertise.retentionBidsRequestBody'
      responses:
        '200':
          description: List of retention bids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/advertise.retentionBidsResponseBody'
        <<: *errorResponses

components:
  securitySchemes:
    Authentication:
      type: http
      scheme: basic

  # These could be refactored to documentation-base.yaml after these have been validated as proper predefined parameters
  parameters:
    advertise.campaignSetId:
      name: campaignSetId
      in: path
      description: Unique identifier for an App.
      required: true
      schema:
        $ref: '#/components/schemas/advertise.campaignSetId'
    advertise.campaignId:
      name: campaignId
      in: path
      description: ID of the campaign
      required: true
      schema:
        $ref: '#/components/schemas/advertise.campaignId'
    advertise.organizationCoreId:
      name: organizationId
      in: path
      description: |
        Core ID of the organization.

        You can look up your Organization's ID by opening up the [Acquire Dashboard](https://dashboard.unity3d.com/acquire)
        and by looking up the ID from the browser's address bar: `https://dashboard.unity3d.com/organizations/<ORGANIZATION_ID_IS_HERE>/acquire/about`

        For further information about the IDs, please see following [documentation](#section/General-Information/Resource-IDs-Used-in-the-API-Calls).
      required: true
      schema:
        $ref: '#/components/schemas/advertise.organizationCoreId'
    advertise.creativeId:
      name: creativeId
      in: path
      description: ID of the creative
      required: true
      schema:
        $ref: '#/components/schemas/advertise.creativeId'
    advertise.creativePackId:
      name: creativePackId
      in: path
      description: ID of the creative pack
      required: true
      schema:
        $ref: '#/components/schemas/advertise.creativePackId'
    advertise.assignedCreativePackId:
      name: assignedCreativePackId
      in: path
      description: ID of the assigned creative pack
      required: true
      schema:
        $ref: '#/components/schemas/advertise.creativePackId'
    advertise.offset:
      name: offset
      in: query
      description: |
        Offset tells to skip that many entities before start returning entities.
        `offset=0` is the same as omitting the offset clause.
        If both `offset` and `limit` are present, then `offset` entities are skipped before starting to count the `limit` entities that are returned.
      required: false
      schema:
        $ref: '#/components/schemas/advertise.offset'
    advertise.appsLimit:
      name: limit
      in: query
      description: Amount of entities to return.
      required: false
      schema:
        $ref: '#/components/schemas/advertise.appsLimit'
    advertise.creativePacksLimit:
      name: limit
      in: query
      description: Amount of entities to return.
      required: false
      schema:
        $ref: '#/components/schemas/advertise.creativePacksLimit'
    advertise.budgetId:
      name: budgetId
      in: path
      description: ID of the budget
      required: true
      schema:
        $ref: '#/components/schemas/advertise.budgetId'

  schemas:
    advertise.appsResponseBody:
      type: object
      additionalProperties: false
      properties:
        total:
          $ref: '#/components/schemas/advertise.total'
        offset:
          $ref: '#/components/schemas/advertise.offset'
        limit:
          $ref: '#/components/schemas/advertise.appsLimit'
        results:
          $ref: '#/components/schemas/advertise.apps'

    advertise.createdCampaignResponseBody:
      $ref: '#/components/schemas/advertise.campaign'

    advertise.updatedCampaignResponseBody:
      $ref: '#/components/schemas/advertise.campaign'

    advertise.campaignsResponseBody:
      type: object
      additionalProperties: false
      properties:
        total:
          $ref: '#/components/schemas/advertise.total'
        results:
          $ref: '#/components/schemas/advertise.campaigns'

    advertise.campaignResponseBody:
      $ref: '#/components/schemas/advertise.campaign'

    advertise.cpiBidsResponseBody:
      type: object
      additionalProperties: false
      properties:
        total:
          $ref: '#/components/schemas/advertise.total'
        results:
          $ref: '#/components/schemas/advertise.cpiBids'

    advertise.cpiBidsRequestBody:
      $ref: '#/components/schemas/advertise.cpiBids'

    advertise.sourceBidsResponseBody:
      type: object
      additionalProperties: false
      properties:
        total:
          $ref: '#/components/schemas/advertise.total'
        results:
          $ref: '#/components/schemas/advertise.sourceBids'

    advertise.sourceBidsRequestBody:
      $ref: '#/components/schemas/advertise.sourceBids'

    advertise.roasBidsResponseBody:
      type: object
      additionalProperties: false
      properties:
        total:
          $ref: '#/components/schemas/advertise.total'
        results:
          $ref: '#/components/schemas/advertise.roasBids'

    advertise.roasInfoResponseBody:
      type: object
      additionalProperties: false
      properties:
        total:
          $ref: '#/components/schemas/advertise.total'
        results:
          $ref: '#/components/schemas/advertise.roasInfo'

    advertise.roasBidsRequestBody:
      $ref: '#/components/schemas/advertise.roasBids'

    advertise.retentionInfoResponseBody:
      type: object
      additionalProperties: false
      properties:
        total:
          $ref: '#/components/schemas/advertise.total'
        results:
          $ref: '#/components/schemas/advertise.retentionInfo'

    advertise.retentionBidsResponseBody:
      type: object
      additionalProperties: false
      properties:
        total:
          $ref: '#/components/schemas/advertise.total'
        results:
          $ref: '#/components/schemas/advertise.retentionBids'

    advertise.retentionBidsRequestBody:
      $ref: '#/components/schemas/advertise.retentionBids'

    advertise.creativeSquareEndCardRequestBody:
      type: object
      additionalProperties: false
      required:
        - creativeInfo
        - squareEndCardFile
      properties:
        creativeInfo:
          # default Content-Type for objects is `application/json`
          type: object
          additionalProperties: false
          description: Field that contains creative metadata in JSON format.
          required:
            - name
            - language
            - squareEndCard
          properties:
            name:
              $ref: '#/components/schemas/advertise.creativeName'
            type:
              description: This field is deprecated. Given value is omitted.
            language:
              $ref: '#/components/schemas/advertise.creativeLanguage'
            squareEndCard:
              $ref: '#/components/schemas/advertise.creativeFileMetadata'
        squareEndCardFile:
          $ref: '#/components/schemas/advertise.creativeSquareImageFile'

    advertise.creativePairEndCardRequestBody:
      type: object
      additionalProperties: false
      required:
        - creativeInfo
        - portraitEndCardFile
        - landscapeEndCardFile
      properties:
        creativeInfo:
          # default Content-Type for objects is `application/json`
          type: object
          additionalProperties: false
          description: Field that contains creative metadata in JSON format.
          required:
            - name
            - language
            - portraitEndCard
            - landscapeEndCard
          properties:
            name:
              $ref: '#/components/schemas/advertise.creativeName'
            type:
              type: string
              description: This field is deprecated. Given value is omitted.
            language:
              $ref: '#/components/schemas/advertise.creativeLanguage'
            portraitEndCard:
              $ref: '#/components/schemas/advertise.creativeFileMetadata'
            landscapeEndCard:
              $ref: '#/components/schemas/advertise.creativeFileMetadata'
        portraitEndCardFile:
          $ref: '#/components/schemas/advertise.creativePortraitImageFile'
        landscapeEndCardFile:
          $ref: '#/components/schemas/advertise.creativeLandscapeImageFile'

    advertise.creativeVideoRequestBody:
      type: object
      additionalProperties: false
      required:
        - creativeInfo
        - videoFile
      properties:
        creativeInfo:
          # default Content-Type for objects is `application/json`
          type: object
          additionalProperties: false
          description: Field that contains creative metadata in JSON format.
          required:
            - name
            - language
            - video
          properties:
            name:
              $ref: '#/components/schemas/advertise.creativeName'
            type:
              type: string
              description: This field is deprecated. Given value is omitted.
            language:
              $ref: '#/components/schemas/advertise.creativeLanguage'
            video:
              $ref: '#/components/schemas/advertise.creativeFileMetadata'
        videoFile:
          $ref: '#/components/schemas/advertise.creativeVideoFile'

    advertise.creativePlayableRequestBody:
      type: object
      additionalProperties: false
      required:
        - creativeInfo
        - playableFile
      properties:
        creativeInfo:
          # default Content-Type for objects is `application/json`
          type: object
          additionalProperties: false
          description: Field that contains creative metadata in JSON format.
          required:
            - name
            - language
            - playable
          properties:
            name:
              $ref: '#/components/schemas/advertise.creativeName'
            language:
              $ref: '#/components/schemas/advertise.creativeLanguage'
            playable:
              $ref: '#/components/schemas/advertise.creativePlayableFileMetadata'
        playableFile:
          $ref: '#/components/schemas/advertise.creativePlayableFile'

    advertise.app:
      type: object
      additionalProperties: false
      description: An object contains the campaigns for an App. Apps are identified by a campaignSetId
      properties:
        id:
          $ref: '#/components/schemas/advertise.campaignSetId'
        name:
          $ref: '#/components/schemas/advertise.appName'
        store:
          $ref: '#/components/schemas/advertise.store'
        storeId:
          $ref: '#/components/schemas/advertise.storeId'
        adomain:
          $ref: '#/components/schemas/advertise.adomain'
        createdAt:
          $ref: '#/components/schemas/advertise.createdAt'
        updatedAt:
          $ref: '#/components/schemas/advertise.updatedAt'

    advertise.apps:
      type: array
      description: Array of apps.
      items:
        $ref: '#/components/schemas/advertise.app'

    advertise.campaign:
      description: An object that holds campaign data.
      oneOf:
        - $ref: '#/components/schemas/advertise.cpiCampaign'
        - $ref: '#/components/schemas/advertise.roasCampaign'

    advertise.campaigns:
      type: array
      description: Array of campaigns.
      items:
        anyOf:
          - $ref: '#/components/schemas/advertise.cpiCampaign'
          - $ref: '#/components/schemas/advertise.roasCampaign'
        discriminator:
          propertyName: goal
          mapping:
            installs: '#/components/schemas/advertise.cpiCampaign'
            roas: '#/components/schemas/advertise.roasCampaign'
            retention: '#/components/schemas/advertise.cpiCampaign'

    advertise.createCampaignRequestBody:
      description: An object that holds campaign data.
      oneOf:
        - $ref: '#/components/schemas/advertise.createCpiRetentionCampaignRequestBody'
        - $ref: '#/components/schemas/advertise.createRoasCampaignRequestBody'
      discriminator:
        propertyName: goal
        mapping:
          installs: '#/components/schemas/advertise.createCpiRetentionCampaignRequestBody'
          roas: '#/components/schemas/advertise.createRoasCampaignRequestBody'
          retention: '#/components/schemas/advertise.createCpiRetentionCampaignRequestBody'

    advertise.createCpiRetentionCampaignRequestBody:
      type: object
      additionalProperties: false
      required:
        - name
        - goal
      properties:
        name:
          $ref: '#/components/schemas/advertise.campaignName'
        goal:
          $ref: '#/components/schemas/advertise.campaignGoal'
        billingType:
          $ref: '#/components/schemas/advertise.billingType'
        attributionClickUrl:
          $ref: '#/components/schemas/advertise.campaignAttributionClickUrlNotNullable'
        attributionStartUrl:
          $ref: '#/components/schemas/advertise.campaignAttributionStartUrlNotNullable'
        attributionViewUrl:
          $ref: '#/components/schemas/advertise.campaignAttributionViewUrlNotNullable'
        scheduleStart:
          $ref: '#/components/schemas/advertise.campaignScheduleStart'
        scheduleEnd:
          $ref: '#/components/schemas/advertise.campaignScheduleEndNotNullable'

    advertise.updateCampaignRequestBody:
      type: object
      additionalProperties: false
      minProperties: 1
      properties:
        name:
          $ref: '#/components/schemas/advertise.campaignName'
        enabled:
          $ref: '#/components/schemas/advertise.enabled'
        attributionClickUrl:
          $ref: '#/components/schemas/advertise.campaignAttributionClickUrl'
        attributionStartUrl:
          $ref: '#/components/schemas/advertise.campaignAttributionStartUrl'
        attributionViewUrl:
          $ref: '#/components/schemas/advertise.campaignAttributionViewUrl'
        scheduleStart:
          $ref: '#/components/schemas/advertise.campaignScheduleStart'
        scheduleEnd:
          $ref: '#/components/schemas/advertise.campaignScheduleEnd'

    advertise.createRoasCampaignRequestBody:
      type: object
      additionalProperties: false
      required:
        - name
        - goal
      properties:
        name:
          $ref: '#/components/schemas/advertise.campaignName'
        goal:
          $ref: '#/components/schemas/advertise.campaignGoal'
        billingType:
          $ref: '#/components/schemas/advertise.billingType'
        attributionClickUrl:
          $ref: '#/components/schemas/advertise.campaignAttributionClickUrlNotNullable'
        attributionStartUrl:
          $ref: '#/components/schemas/advertise.campaignAttributionStartUrlNotNullable'
        attributionViewUrl:
          $ref: '#/components/schemas/advertise.campaignAttributionViewUrlNotNullable'
        scheduleStart:
          $ref: '#/components/schemas/advertise.campaignScheduleStart'
        scheduleEnd:
          $ref: '#/components/schemas/advertise.campaignScheduleEndNotNullable'
        roasTypes:
          $ref: '#/components/schemas/advertise.nonEmptyRoasTypes'

    advertise.cpiCampaign:
      type: object
      description: An object that holds campaign data for CPI campaigns.
      additionalProperties: false
      required:
        - id
        - goal
        - billingType
        - enabled
        - attributionClickUrl
        - attributionStartUrl
        - attributionViewUrl
        - scheduleStart
        - scheduleEnd
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: '#/components/schemas/advertise.campaignId'
        name:
          $ref: '#/components/schemas/advertise.campaignName'
        goal:
          $ref: '#/components/schemas/advertise.campaignGoal'
        billingType:
          $ref: '#/components/schemas/advertise.billingType'
        enabled:
          $ref: '#/components/schemas/advertise.enabled'
        attributionClickUrl:
          $ref: '#/components/schemas/advertise.campaignAttributionClickUrl'
        attributionStartUrl:
          $ref: '#/components/schemas/advertise.campaignAttributionStartUrl'
        attributionViewUrl:
          $ref: '#/components/schemas/advertise.campaignAttributionViewUrl'
        scheduleStart:
          $ref: '#/components/schemas/advertise.campaignScheduleStart'
        scheduleEnd:
          $ref: '#/components/schemas/advertise.campaignScheduleEnd'
        createdAt:
          $ref: '#/components/schemas/advertise.createdAt'
        updatedAt:
          $ref: '#/components/schemas/advertise.updatedAt'

    advertise.roasCampaign:
      type: object
      description: An object that holds campaign data for ROAS campaigns.
      additionalProperties: false
      required:
        - id
        - goal
        - billingType
        - enabled
        - attributionClickUrl
        - attributionStartUrl
        - attributionViewUrl
        - scheduleStart
        - scheduleEnd
        - createdAt
        - updatedAt
        - roasTypes
      properties:
        id:
          $ref: '#/components/schemas/advertise.campaignId'
        name:
          $ref: '#/components/schemas/advertise.campaignName'
        goal:
          $ref: '#/components/schemas/advertise.campaignGoal'
        billingType:
          $ref: '#/components/schemas/advertise.billingType'
        enabled:
          $ref: '#/components/schemas/advertise.enabled'
        attributionClickUrl:
          $ref: '#/components/schemas/advertise.campaignAttributionClickUrl'
        attributionStartUrl:
          $ref: '#/components/schemas/advertise.campaignAttributionStartUrl'
        attributionViewUrl:
          $ref: '#/components/schemas/advertise.campaignAttributionViewUrl'
        scheduleStart:
          $ref: '#/components/schemas/advertise.campaignScheduleStart'
        scheduleEnd:
          $ref: '#/components/schemas/advertise.campaignScheduleEnd'
        createdAt:
          $ref: '#/components/schemas/advertise.createdAt'
        updatedAt:
          $ref: '#/components/schemas/advertise.updatedAt'
        roasTypes:
          $ref: '#/components/schemas/advertise.roasTypes'

    advertise.cpiBids:
      type: array
      description: Array of CPI bids.
      items:
        type: object
        additionalProperties: false
        description: Key-value objects of CPI bids.
        properties:
          country:
            $ref: '#/components/schemas/advertise.country'
          bid:
            $ref: '#/components/schemas/advertise.bid'
        required:
          - country
          - bid

    advertise.sourceBids:
      type: array
      description: Array of source bids.
      items:
        type: object
        additionalProperties: false
        description: Key-value objects of source bids.
        properties:
          country:
            $ref: '#/components/schemas/advertise.country'
          sourceAppId:
            $ref: '#/components/schemas/advertise.sourceAppId'
          bid:
            $ref: '#/components/schemas/advertise.bid'
        required:
          - country
          - sourceAppId
          - bid

    advertise.roasBids:
      type: array
      description: Array of ROAS bids.
      items:
        type: object
        additionalProperties: false
        description: Key-value objects of ROAS bids.
        properties:
          country:
            $ref: '#/components/schemas/advertise.country'
          goal:
            $ref: '#/components/schemas/advertise.roasGoal'
          maxBid:
            $ref: '#/components/schemas/advertise.roasMaxBid'
        required:
          - country
          - goal
          - maxBid

    advertise.retentionInfo:
      type: array
      description: Array of Retention countries.
      items:
        type: object
        additionalProperties: false
        description: Key-value objects of Retention countries.
        properties:
          country:
            $ref: '#/components/schemas/advertise.country'
        required:
          - country

    advertise.roasInfo:
      type: array
      description: Array of ROAS information for the countries that are eligible for ROAS campaigns.
      items:
        type: object
        additionalProperties: false
        description: Key-value objects of ROAS bids info.
        properties:
          country:
            $ref: '#/components/schemas/advertise.country'
          suggestedIapGoal:
            $ref: '#/components/schemas/advertise.roasSuggestedIapGoal'
          suggestedAdRevenueGoal:
            $ref: '#/components/schemas/advertise.roasSuggestedAdRevenueGoal'
          eligibility:
            $ref: '#/components/schemas/advertise.roasEligibilities'
        required:
          - country
          - suggestedIapGoal
          - suggestedAdRevenueGoal
          - eligibility

    advertise.retentionBids:
      type: array
      description: Array of retention bids.
      items:
        type: object
        additionalProperties: false
        description: Key-value objects of retention bids.
        properties:
          country:
            $ref: '#/components/schemas/advertise.country'
          baseBid:
            $ref: '#/components/schemas/advertise.retentionBaseBid'
          maxBid:
            $ref: '#/components/schemas/advertise.retentionMaxBid'
        required:
          - country
          - baseBid
          - maxBid

    advertise.campaignSetId:
      type: string
      pattern: '^[0-9a-fA-F]{24}$'
      description: Unique identifier for an App.
      example: 5eb26a338a232100e4bb5893

    advertise.campaignId:
      type: string
      pattern: '^[0-9a-fA-F]{24}$'
      description: Unique identifier of the Campaign.
      example: 5eb26a338a232100e4bb6361

    advertise.country:
      type: string
      description: Country code in ISO 3166-1 alpha-2 format.
      example: US
      enum:
        - AD
        - AE
        - AF
        - AG
        - AI
        - AL
        - AM
        - AO
        - AR
        - AS
        - AT
        - AU
        - AW
        - AX
        - AZ
        - BA
        - BB
        - BD
        - BE
        - BF
        - BG
        - BH
        - BI
        - BJ
        - BM
        - BN
        - BO
        - BR
        - BS
        - BT
        - BV
        - BW
        - BY
        - BZ
        - CA
        - CD
        - CF
        - CG
        - CH
        - CI
        - CK
        - CL
        - CM
        - CN
        - CO
        - CR
        - CV
        - CY
        - CZ
        - DE
        - DJ
        - DK
        - DM
        - DO
        - DZ
        - EC
        - EE
        - EG
        - ER
        - ES
        - ET
        - FI
        - FJ
        - FK
        - FM
        - FO
        - FR
        - GA
        - GB
        - GD
        - GE
        - GF
        - GG
        - GH
        - GI
        - GL
        - GM
        - GN
        - GP
        - GQ
        - GR
        - GT
        - GU
        - GW
        - GY
        - HK
        - HM
        - HN
        - HR
        - HT
        - HU
        - ID
        - IE
        - IL
        - IM
        - IN
        - IO
        - IQ
        - IS
        - IT
        - JE
        - JM
        - JO
        - JP
        - KE
        - KG
        - KH
        - KI
        - KM
        - KN
        - KR
        - KW
        - KY
        - KZ
        - LA
        - LB
        - LC
        - LI
        - LK
        - LR
        - LS
        - LT
        - LU
        - LV
        - LY
        - MA
        - MC
        - MD
        - ME
        - MF
        - MG
        - MH
        - MK
        - ML
        - MM
        - MN
        - MO
        - MP
        - MQ
        - MR
        - MS
        - MT
        - MU
        - MV
        - MW
        - MX
        - MY
        - MZ
        - NA
        - NC
        - NE
        - NF
        - NG
        - NI
        - NL
        - 'NO'
        - NP
        - NR
        - NU
        - NZ
        - OM
        - PA
        - PE
        - PF
        - PG
        - PH
        - PK
        - PL
        - PM
        - PR
        - PS
        - PT
        - PW
        - PY
        - QA
        - RE
        - RO
        - RS
        - RU
        - RW
        - SA
        - SB
        - SC
        - SD
        - SE
        - SG
        - SI
        - SK
        - SL
        - SM
        - SN
        - SO
        - SR
        - ST
        - SV
        - SZ
        - TC
        - TD
        - TF
        - TG
        - TH
        - TJ
        - TK
        - TM
        - TN
        - TO
        - TR
        - TT
        - TV
        - TW
        - TZ
        - UA
        - UG
        - UM
        - US
        - UY
        - UZ
        - VA
        - VC
        - VE
        - VG
        - VI
        - VN
        - VU
        - WF
        - WS
        - YE
        - YT
        - ZA
        - ZM
        - ZW

    advertise.sourceAppId:
      type: string
      pattern: '^[a-zA-Z0-9]{12}$'
      description: Unique identifier of the source app.
      example: 0a1b2c3D4E5f

    advertise.bid:
      type: string
      format: unity.advertise.money
      pattern: '^\d{1,3}(\.\d{1,2})?$'
      description: |
        Value of the bid in dollars.
        The value must be between 0.01 and 100.00 dollars (the limits include the lower and the upper bound).
        Please note that the upper dollar limit for a bid can be further limited based on the selected country.
        The value can be set in one cent intervals. Fractions of cents are not supported.
      example: '0.20'

    advertise.roasGoal:
      type: string
      pattern: '^\d{1,4}(\.\d{1,2})?$'
      description: |
        The goal for day 7 return on ad spend, defined as a percentage.

        ROAS goal influences the CPI bid placed for a user, and there is a tradeoff between the goal and
        volume. A lower goal permits higher CPIs for more volume and vice versa. CPIs are adjusted so that
        the campaign hits its D7 ROAS goal over time. Set the goal based on your selected optimization type.
      example: '12.34'

    advertise.roasSuggestedIapGoal:
      type: string
      pattern: '^\d{1,4}(\.\d{1,2})?$'
      description: |
        The suggested goal for day 7 return on In-App purchases, defined as a percentage.

        ROAS goal influences the CPI bid placed for a user, and there is a tradeoff between the goal and
        volume. A lower goal permits higher CPIs for more volume and vice versa. CPIs are adjusted so that
        the campaign hits its D7 ROAS goal over time.

        These suggestions are automatically evaluated by the <a href="https://unityads.unity3d.com/help/advertising/audience-pinpointer" target="_blank">Audience Pinpointer</a>
        using the current information it has on your app.
      example: '12.34'

    advertise.roasSuggestedAdRevenueGoal:
      type: string
      pattern: '^\d{1,4}(\.\d{1,2})?$'
      description: |
        The suggested goal for day 7 return on Ad Revenue, defined as a percentage.

        ROAS goal influences the CPI bid placed for a user, and there is a tradeoff between the goal and
        volume. A lower goal permits higher CPIs for more volume and vice versa. CPIs are adjusted so that
        the campaign hits its D7 ROAS goal over time.

        These suggestions are automatically evaluated by the <a href="https://unityads.unity3d.com/help/advertising/audience-pinpointer" target="_blank">Audience Pinpointer</a>
        using the current information it has on your app.
      example: '12.34'

    advertise.roasEligibilities:
      type: array
      description: |
        A list of the currently supported ROAS optimization types.

        The possible values are:
        - **iap**: Country is eligible to be used in In-App purchase optimized ROAS campaigns.
        - **adRevenue**: Country is eligible to be used in Ad Revenue optimized ROAS campaigns.
      items:
        $ref: '#/components/schemas/advertise.roasEligibility'

    advertise.roasEligibility:
      type: string
      description: |
        - iap: Country is eligible to be used in In-App purchase optimized ROAS campaigns.
        - adRevenue: Country is eligible to be used in Ad Revenue optimized ROAS campaigns.
      example: iap
      enum:
        - iap
        - adRevenue

    advertise.roasMaxBid:
      type: string
      format: unity.advertise.money
      pattern: '^\d{1,3}(\.\d{1,2})?$'
      description: |
        Maximum bid value in dollars.

        Maximum bid is the intended upper limit for what you wish to pay for users depending on their
        expected value in your game. Your average effective cost per install (eCPI) could sometimes
        exceed this. Setting a low maximum bid may increase your ROAS since you are getting some users
        below their expected value, but it may restrict your volume since you are winning less impressions.
      example: '0.25'

    advertise.retentionBaseBid:
      type: string
      format: unity.advertise.money
      pattern: '^\d{1,3}(\.\d{1,2})?$'
      description: |
        Base bid value in dollars.

        Base bid is the CPI you are willing to pay for the average users eligible for the campaign.
        It is not a minimum bid and your CPI for an individual user can be lower or higher than the
        base bid depending on the user's expected retention in your game.
      example: '0.75'

    advertise.retentionMaxBid:
      type: string
      format: unity.advertise.money
      pattern: '^\d{1,3}(\.\d{1,2})?$'
      description: |
        Maximum bid value in dollars.

        Maximum bid is the intended upper limit for what you wish to pay for users depending on their
        expected retention in your game. Your average effective cost per install (eCPI) could sometimes
        exceed this. It is recommended to set the max bid at 2-3x the base bid.
      example: '0.25'

    advertise.total:
      type: integer
      description: Total number of returned entities.
      example: 1

    advertise.offset:
      type: integer
      minimum: 0
      maximum: 9007199254740991 # Number.MAX_SAFE_INTEGER
      default: 0

    advertise.appsLimit:
      type: integer
      minimum: 1
      maximum: 1000
      default: 1000

    advertise.creativePacksLimit:
      type: integer
      minimum: 1
      maximum: 700
      default: 700

    advertise.organizationCoreId:
      type: integer
      format: int64
      minimum: 1
      description: Organization's ID.
      example: 5772680389521

    advertise.enabled:
      type: boolean
      description: Indicates the status of the campaign.
      example: true

    advertise.billingType:
      type: string
      description: |
        Indicates the type of the campaign billing. Possible options:
        - cpi: **cost per install**, you will be billed based on each install your app receives. This is only available where we receive non-aggregated postback data.
        - cpm: **cost per impression**, you will be billed based on each impression the app receives. It supports aggregated postback data for campaigns.
      example: cpi
      enum:
        - cpi
        - cpm

    advertise.roasTypes:
      type: array
      description: |
        An array with the ROAS types this campaign is optimizing for. Possible types:

        * **iap**: The campaign is being optimized for IAP revenue.
        * **adRevenue**: The campaign is being optimized for Ad revenue.
      items:
        $ref: '#/components/schemas/advertise.roasType'

    advertise.nonEmptyRoasTypes:
      minItems: 1
      allOf:
        - $ref: '#/components/schemas/advertise.roasTypes'

    advertise.roasType:
      type: string
      description: |
        - iap: ROAS campaign is being optimized for In-App purchases.
        - adRevenue: ROAS campaign is being optimized for Ad revenue.
      example: iap
      enum:
        - iap
        - adRevenue

    advertise.createdAt:
      type: string
      format: date-time
      description: UTC date and time describing when the entity was created.
      example: 2020-07-20T18:30:51.243Z

    advertise.updatedAt:
      type: string
      format: date-time
      description: UTC date and time describing when the entity was last updated.
      example: 2020-08-25T11:55:20.651Z

    advertise.appName:
      type: string
      minLength: 1
      maxLength: 255
      description: Name for the app.
      example: My Game

    advertise.store:
      type: string
      description: The app store that is linked to this app.
      example: apple
      enum:
        - apple
        - google
        - standalone_android

    advertise.storeId:
      type: string
      nullable: true
      description: |
        The store ID of the app.

        For Android apps this is the application ID (example: `com.companyname.appname`) and for iOS apps
        this is a number (example: `1234567`).
      example: com.companyname.appname

    advertise.adomain:
      type: string
      maxLength: 100
      minLength: 4
      nullable: true
      description: |
        The advertiser domain of the app. [Documentation](https://unityads.unity3d.com/help/advertising/getting-started#working-with-advertiser-domains)

        An advertiser domain is the organization's identifying URL and can be the company or app's homepage.
      example: example.com

    advertise.appleStoreId:
      type: string
      pattern: '^[0-9]+$'
      description: The app's App Store ID.
      example: '1234567'

    advertise.googleStoreId:
      type: string
      description: The app's Play Store ID.
      example: com.example.myapp

    advertise.campaignName:
      type: string
      minLength: 1
      maxLength: 255
      description: Campaign's name.
      example: CPI campaign for My Game

    advertise.campaignAttributionStartUrl:
      type: string
      nullable: true
      minLength: 1
      maxLength: 2082
      pattern: '^https:.*$'
      description: Fired when players start viewing the video.
      example: 'https://example.com/{ifa}'

    advertise.campaignAttributionViewUrl:
      type: string
      nullable: true
      minLength: 1
      maxLength: 2082
      pattern: '^https:.*$'
      description: Fired when players finish watching the video.
      example: https://example.com/{ifa}

    advertise.campaignAttributionClickUrl:
      type: string
      nullable: true
      minLength: 1
      maxLength: 2082
      pattern: '^https:.*$'
      description: Fired when the player clicks the download button.
      example: https://example.com/{ifa}

    advertise.campaignAttributionClickUrlNotNullable:
      type: string
      nullable: false
      minLength: 1
      maxLength: 2082
      pattern: '^https:.*$'
      description: Fired when the player clicks the download button.
      example: https://example.com/{ifa}

    advertise.campaignAttributionViewUrlNotNullable:
      type: string
      nullable: false
      minLength: 1
      maxLength: 2082
      pattern: '^https:.*$'
      description: Fired when players finish watching the video.
      example: https://example.com/{ifa}

    advertise.campaignAttributionStartUrlNotNullable:
      type: string
      nullable: false
      minLength: 1
      maxLength: 2082
      pattern: '^https:.*$'
      description: Fired when players start viewing the video.
      example: 'https://example.com/{ifa}'

    advertise.campaignScheduleStart:
      type: string
      format: date
      description: UTC date describing the start date of the campaign.
      example: '2020-08-25'

    advertise.campaignScheduleEnd:
      type: string
      nullable: true
      format: date
      description: UTC date describing the end date of the campaign.
      example: '2020-11-02'

    advertise.campaignScheduleEndNotNullable:
      type: string
      nullable: false
      format: date
      description: UTC date describing the end date of the campaign.
      example: '2020-11-02'

    advertise.campaignGoal:
      type: string
      description: |
        Campaign's goal. Available options:

        * **installs**: cost per install - campaign is optimized for getting the most installs possible with your target cost.
        * **roas**: return on ad spend - campaign is optimized for finding users who are predicted to bring your target return on ad spend during the first 7 days in your app.
        * **retention**: campaign is optimized for finding users who are likely to remain in your app for 7 days or more after installing.

      example: installs
      enum:
        - installs
        - retention
        - roas

    advertise.creativeName:
      type: string
      minLength: 1
      maxLength: 255
      description: Creative name.
      example: My Creative

    advertise.creativeLanguage:
      type: string
      description: |
        What language is the creative in? The accepted values are a subset of the
        [IANA language subtag registry](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry).
        Note the two special values: `zxx` for *No linguistic content* and `und` for *Undetermined*.

        Collecting creative language information will help improve Unity's machine learning algorithms, further
        enabling you to find the right players at scale.
      example: en
      enum:
        - 'zxx' # No linguistic content
        - 'und' # Undetermined
        - 'af' # Afrikaans
        - 'ar' # Arabic
        - 'as' # Assamese
        - 'az' # Azerbaijani
        - 'be' # Belarusian
        - 'bn' # Bengali
        - 'bg' # Bulgarian
        - 'ca' # Catalan
        - 'zh' # Chinese
        - 'hr' # Croatian
        - 'cs' # Czech
        - 'da' # Danish
        - 'nl' # Dutch
        - 'en' # English
        - 'et' # Estonian
        - 'fil' # Filipino
        - 'fi' # Finnish
        - 'fr' # French
        - 'de' # German
        - 'el' # Greek
        - 'he' # Hebrew
        - 'hi' # Hindi
        - 'hu' # Hungarian
        - 'is' # Icelandic
        - 'id' # Indonesian
        - 'it' # Italian
        - 'ja' # Japanese
        - 'kk' # Kazakh
        - 'ko' # Korean
        - 'ky' # Kyrgyz
        - 'lv' # Latvian
        - 'lt' # Lithuanian
        - 'mk' # Macedonian
        - 'ms' # Malay
        - 'mr' # Marathi
        - 'mn' # Mongolian
        - 'ne' # Nepali
        - 'no' # Norwegian
        - 'ps' # Pashtu
        - 'fa' # Persian
        - 'pl' # Polish
        - 'pt' # Portuguese
        - 'ro' # Romanian
        - 'ru' # Russian
        - 'sa' # Sanskrit
        - 'sr' # Serbian
        - 'sk' # Slovak
        - 'sl' # Slovenian
        - 'es' # Spanish
        - 'sv' # Swedish
        - 'ta' # Tamil
        - 'th' # Thai
        - 'tr' # Turkish
        - 'uk' # Ukrainian
        - 'ur' # Urdu
        - 'uz' # Uzbek
        - 'vi' # Vietnamese

    advertise.creativeFileMetadata:
      type: object
      additionalProperties: false
      description: Creative file metadata
      required:
        - fileName
      properties:
        fileName:
          $ref: '#/components/schemas/advertise.creativeFileName'

    advertise.creativePlayableFileMetadata:
      type: object
      additionalProperties: false
      description: Playable creative file metadata
      required:
        - fileName
        - orientation
      properties:
        fileName:
          $ref: '#/components/schemas/advertise.creativeFileName'
        orientation:
          $ref: '#/components/schemas/advertise.creativePlayableFileOrientation'

    advertise.creativePlayableFileOrientation:
      type: string
      description: Creative's Orientation
      example: both
      enum:
        - landscape
        - portrait
        - both

    advertise.creativeFileName:
      type: string
      minLength: 1
      maxLength: 255
      pattern: '^.*\.(jpg|jpeg|png|gif|mp4|JPG|JPEG|PNG|GIF|MP4|html|htm|HTML|HTM)$'
      description: |
        Name of the creative file. The name could be for example **mySquareEndCard.jpeg** for an end card or
        **my_horizontal_video.mp4** for a video creative.
      example: GameXVideoFile.mp4

    advertise.creativeFile:
      # default Content-Type for string/binary is `application/octet-stream`
      type: string
      format: binary

    advertise.creativeSquareImageFile:
      # default Content-Type for string/binary is `application/octet-stream`
      type: string
      format: binary
      description: |
        The file that contains the square end card image.

        The image dimensions must be 800â€‰Ã—â€‰800. The file format must be either PNG, JPEG or GIF.
        The maximum file size is 5MB.

    advertise.creativePortraitImageFile:
      # default Content-Type for string/binary is `application/octet-stream`
      type: string
      format: binary
      description: |
        The file that contains the portrait end card image.

        The image dimensions must be 600â€‰Ã—â€‰800. The file format must be either PNG, JPEG or GIF.
        The maximum file size is 5MB.

        Dynamic cropping may occur for portrait and landscape end cards to account for
        different device sizes. To avoid losing critical information, allow a buffer from the image borders.

    advertise.creativeLandscapeImageFile:
      # default Content-Type for string/binary is `application/octet-stream`
      type: string
      format: binary
      description: |
        The file that contains the landscape end card image.

        The image dimensions must be 800â€‰Ã—â€‰600. The file format must be either PNG, JPEG or GIF.
        The maximum file size is 5MB.

        Dynamic cropping may occur for portrait and landscape end cards to account for
        different device sizes. To avoid losing critical information, allow a buffer from the image borders.

    advertise.creativeVideoFile:
      # default Content-Type for string/binary is `application/octet-stream`
      type: string
      format: binary
      description: |
        File that contains the video ad asset.

        The video should be 30 seconds or less and in H.264-encoded MP4 format. The recommended file
        size is 10MB, and the maximum file size is 100MB. The video can be either in portrait format
        with 9:16 aspect ratio or in landscape format with 16:9 aspect ratio.

    advertise.creativePlayableFile:
      # default Content-Type for string/binary is `application/octet-stream`
      type: string
      format: binary
      description: |
        File that contains the playable ad asset.

        The maximum file size is 5MB.

    advertise.creativeId:
      type: string
      pattern: '^[0-9a-fA-F]{24}$'
      description: Unique identifier of the Creative.
      example: 5eb26a338a232100e4cc9945

    advertise.creativeType:
      type: string
      description: Creative's type
      example: landscapeVideo
      enum:
        - squareEndCard
        - endCardPair
        - portraitVideo
        - landscapeVideo
        - squareVideo
        - responsivePlayable
        - portraitPlayable
        - landscapePlayable

    advertise.creativePreviewFiles:
      type: array
      description: Array of creative files.
      items:
        $ref: '#/components/schemas/advertise.creativePreviewFile'

    advertise.creativePreviewFile:
      type: object
      description: Creative file object
      required:
        - name
        - url
      properties:
        name:
          $ref: '#/components/schemas/advertise.creativePreviewFileName'
        url:
          $ref: '#/components/schemas/advertise.creativePreviewFileURL'

    advertise.creativePreviewFileName:
      type: string
      minLength: 1
      maxLength: 255
      description: |
        Name of the creative file.

    advertise.creativePreviewFileURL:
      type: string
      minLength: 1
      maxLength: 605
      description: |
        Full URL of a creative
      example: https://example.com/directory/image.jpg

    advertise.creativeStatus:
      type: string
      # TODO: Add different processing / moderation times when playable type is supported by postCreative endpoint.
      description: |
        Status of the creative in processing and moderation.

        **Processing and moderation order**

        ```
        uploaded â†’ processing â†’ pendingModeration â†’ approved
                       â†“                â†“
                processingFailed     rejected
        ```

        **Statuses**
        * **uploaded**: The creative has been uploaded to the system successfully and is waiting for to be processed.
        * **processing**: The creative is being processed. This step should take normally maximum of few minutes.
        * **processingFailed**: The creative could not be processed. Try to upload the creative again and if the problem persists, please use another file.
        * **pendingModeration**: The creative is waiting for moderation to check the content. This step normally takes around a few hours but might take longer. [Learn more](https://unityads.unity3d.com/help/advertising/campaign-design-guide#moderation).
        * **approved**: The creative has been approved by the moderation.
        * **rejected**: The creative has been rejected by the moderation. The details of the rejection reason can be found via [Unity dashboard](https://dashboard.unity3d.com).
      example: approved
      enum:
        - uploaded
        - processing
        - processingFailed
        - pendingModeration
        - approved
        - rejected

    advertise.creative:
      type: object
      additionalProperties: false
      description: Creative metadata
      properties:
        id:
          $ref: '#/components/schemas/advertise.creativeId'
        name:
          $ref: '#/components/schemas/advertise.creativeName'
        language:
          $ref: '#/components/schemas/advertise.creativeLanguage'
        type:
          $ref: '#/components/schemas/advertise.creativeType'
        files:
          $ref: '#/components/schemas/advertise.creativePreviewFiles'
        createdAt:
          $ref: '#/components/schemas/advertise.createdAt'
        status:
          $ref: '#/components/schemas/advertise.creativeStatus'
        # files:
        #   type: array
        #   description: An array containing information about the files/assets attached to this creative.
        #   items:
        #     $ref: '#/components/schemas/advertise.creativeFileMetadata'
        # TODO should moderation be an object? Where do we return the possible rejectionReason?
        # TODO should we return encoding errors?
        # TODO what to return under the files array?

    advertise.creativesResponseBody:
      type: object
      additionalProperties: false
      properties:
        total:
          $ref: '#/components/schemas/advertise.total'
        results:
          $ref: '#/components/schemas/advertise.creatives'

    advertise.creativePacksResponseBody:
      type: object
      additionalProperties: false
      properties:
        total:
          $ref: '#/components/schemas/advertise.total'
        offset:
          $ref: '#/components/schemas/advertise.offset'
        limit:
          $ref: '#/components/schemas/advertise.creativePacksLimit'
        results:
          $ref: '#/components/schemas/advertise.creativePacks'

    advertise.assignedCreativePacksResponseBody:
      type: object
      additionalProperties: false
      properties:
        total:
          $ref: '#/components/schemas/advertise.total'
        results:
          $ref: '#/components/schemas/advertise.assignedCreativePacks'

    advertise.assignedCreativePacks:
      type: array
      description: Array of assigned creative pack Ids.
      items:
        $ref: '#/components/schemas/advertise.assignedCreativePack'

    advertise.creatives:
      type: array
      description: Array of creatives.
      items:
        $ref: '#/components/schemas/advertise.creative'

    advertise.creativePacks:
      type: array
      description: Array of creative packs.
      items:
        $ref: '#/components/schemas/advertise.creativePack'

    advertise.creativePackId:
      type: string
      pattern: '^[0-9a-fA-F]{24}$'
      description: Unique identifier of the creative pack.
      example: 5eb26a338a232100e4cc9945

    advertise.creativePackName:
      type: string
      minLength: 1
      maxLength: 255
      description: Creative pack name.
      example: My Creative Pack

    advertise.creativePackCreativeIds:
      type: array
      description: Array of creative IDs.
      minItems: 1
      maxItems: 3
      uniqueItems: true
      items:
        $ref: '#/components/schemas/advertise.creativeId'

    advertise.assignCreativePackRequestBody:
      type: object
      additionalProperties: false
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/advertise.creativePackId'

    advertise.createCreativePackRequestBody:
      type: object
      additionalProperties: false
      required:
        - name
        - creativeIds
        - type
      properties:
        name:
          $ref: '#/components/schemas/advertise.creativePackName'
        creativeIds:
          $ref: '#/components/schemas/advertise.creativePackCreativeIds'
        type:
          $ref: '#/components/schemas/advertise.creativePackType'

    advertise.creativePack:
      type: object
      additionalProperties: false
      required:
        - id
        - name
        - creativeIds
        - type
        - campaignIds
      properties:
        id:
          $ref: '#/components/schemas/advertise.creativePackId'
        name:
          $ref: '#/components/schemas/advertise.creativePackName'
        creativeIds:
          $ref: '#/components/schemas/advertise.creativePackCreativeIds'
        type:
          $ref: '#/components/schemas/advertise.creativePackType'
        campaignIds:
          $ref: '#/components/schemas/advertise.creativePackCampaignIds'

    advertise.assignedCreativePack:
      type: object
      additionalProperties: false
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/advertise.creativePackId'

    advertise.creativePackType:
      type: string
      enum:
        - video
        - playable
        - video+playable

    advertise.updateBudgetRequestBody:
      type: object
      additionalProperties: false
      properties:
        name:
          $ref: '#/components/schemas/advertise.budgetName'
        total:
          $ref: '#/components/schemas/advertise.requestBudgetTotal'
        daily:
          $ref: '#/components/schemas/advertise.requestBudgetDaily'

    advertise.createBudgetRequestBody:
      type: object
      additionalProperties: false
      required:
        - name
        - total
      properties:
        name:
          $ref: '#/components/schemas/advertise.budgetName'
        total:
          $ref: '#/components/schemas/advertise.requestBudgetTotal'
        daily:
          $ref: '#/components/schemas/advertise.requestBudgetDaily'

    advertise.assignedBudgetRequestBody:
      type: object
      additionalProperties: false
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/advertise.budgetId'

    advertise.assignedBudgetResponseBody:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/advertise.budgetId'

    advertise.budgetsResponseBody:
      type: object
      additionalProperties: false
      properties:
        total:
          $ref: '#/components/schemas/advertise.total'
        results:
          $ref: '#/components/schemas/advertise.budgets'

    advertise.updateBudgetsResponseBody:
      $ref: '#/components/schemas/advertise.budget'

    advertise.budgets:
      type: array
      description: Array that holds budget data.
      items:
        $ref: '#/components/schemas/advertise.budget'

    advertise.budget:
      type: object
      additionalProperties: false
      description: Campaign budget.
      properties:
        id:
          $ref: '#/components/schemas/advertise.budgetId'
        name:
          $ref: '#/components/schemas/advertise.budgetName'
        total:
          $ref: '#/components/schemas/advertise.responseBudgetTotal'
        spent:
          $ref: '#/components/schemas/advertise.budgetSpent'
        daily:
          $ref: '#/components/schemas/advertise.responseBudgetDaily'
        dailySpent:
          $ref: '#/components/schemas/advertise.budgetDailySpent'
        campaignIds:
          $ref: '#/components/schemas/advertise.budgetCampaignIds'
        createdAt:
          $ref: '#/components/schemas/advertise.createdAt'
        updatedAt:
          $ref: '#/components/schemas/advertise.updatedAt'

    advertise.budgetId:
      type: string
      pattern: '^[0-9a-fA-F]{24}$'
      description: Unique identifier of the Budget.
      example: 5eb26a338a232100e4cc9945

    advertise.budgetName:
      type: string
      minLength: 1
      maxLength: 255
      description: Name of the budget.
      example: My Budget

    advertise.budgetTotal:
      type: string
      format: unity.advertise.money
      description: |
        Total amount of money in the budget in dollars. Unity recommends a minimum campaign budget of $2,000.
      example: '2500.20'

    advertise.requestBudgetTotal:
      pattern: '^[1-9]\d{0,8}(\.\d{1,2})?$'
      allOf:
        - $ref: '#/components/schemas/advertise.budgetTotal'

    advertise.responseBudgetTotal:
      pattern: '^\d{1,50}(\.\d{1,2})?$'
      allOf:
        - $ref: '#/components/schemas/advertise.budgetTotal'

    advertise.budgetSpent:
      type: string
      format: unity.advertise.money
      pattern: '^\d{1,9}(\.\d{1,2})?$'
      readOnly: true
      description: |
        The amount of money that has been spent so far in dollars.
        The number may not correspond to the value it would have in real time, as there may be some delay.
      example: '1800.32'

    advertise.budgetDaily:
      type: string
      format: unity.advertise.money
      description: |
        The amount of money that can be spent daily in dollars.

        Unity recommends a minimum daily budget of $500 per country. Campaigns with less than $500 daily cap per country
        might not get any exposure due to budget restrictions.

        Having a low daily limit might result in overspend during the first few days, as the system might not be able to
        accurately predict the performance of your campaign.

        The daily limit is disabled when its value is set to `0`. Disabling the daily limit means that the spend
        is capped only by budget's total limit.
      example: '2500.20'

    advertise.requestBudgetDaily:
      pattern: '^\d{1,9}(\.\d{1,2})?$'
      allOf:
        - $ref: '#'

    advertise.responseBudgetDaily:
      pattern: '^\d{1,15}(\.\d{1,2})?$'
      allOf:
        - $ref: '#/components/schemas/advertise.budgetDaily'

    advertise.budgetDailySpent:
      type: string
      format: unity.advertise.money
      pattern: '^\d{1,9}(\.\d{1,2})?$'
      readOnly: true
      description: |
        The amount of money that has been spent from the current day's budget in dollars.
        The number may not correspond to the value it would have in real time, as there may be some delay.
      example: '1800.32'

    advertise.budgetCampaignIds:
      type: array
      description: List of campaigns to which the budget is currently assigned to.
      readOnly: true
      items:
        $ref: '#/components/schemas/advertise.campaignId'

    advertise.creativePackCampaignIds:
      type: array
      description: List of campaigns to which the creative pack is currently assigned to.
      readOnly: true
      items:
        $ref: '#/components/schemas/advertise.campaignId'

    advertise.createAppRequestBody:
      oneOf:
        - $ref: '#/components/schemas/advertise.createAppleAppRequestBody'
        - $ref: '#/components/schemas/advertise.createGoogleAppRequestBody'
      discriminator:
        propertyName: store
        mapping:
          apple: '#/components/schemas/advertise.createAppleAppRequestBody'
          google: '#/components/schemas/advertise.createGoogleAppRequestBody'

    advertise.updateAppRequestBody:
      type: object
      additionalProperties: false
      minProperties: 1
      properties:
        adomain:
          $ref: '#/components/schemas/advertise.adomain'
  
    advertise.createAppleAppRequestBody:
      type: object
      additionalProperties: false
      required:
        - store
        - storeId
      properties:
        store:
          type: string
          enum:
            - apple
        storeId:
          $ref: '#/components/schemas/advertise.appleStoreId'
        adomain:
          $ref: '#/components/schemas/advertise.adomain'

    advertise.createGoogleAppRequestBody:
      type: object
      additionalProperties: false
      required:
        - store
        - storeId
      properties:
        store:
          type: string
          enum:
            - google
        storeId:
          $ref: '#/components/schemas/advertise.googleStoreId'
        adomain:
          $ref: '#/components/schemas/advertise.adomain'

    advertise.getTargetingResponseBody:
      $ref: '#/components/schemas/advertise.targeting'

    advertise.updateTargetingRequestBody:
      $ref: '#/components/schemas/advertise.targeting'

    advertise.updateTargetingResponseBody:
      $ref: '#/components/schemas/advertise.targeting'

    advertise.targeting:
      type: object
      additionalProperties: false
      properties:
        appTargeting:
          $ref: '#/components/schemas/advertise.appTargetingOptions'
        deviceTargeting:
          $ref: '#/components/schemas/advertise.deviceTargetingOptions'

    advertise.appTargetingOptions:
      oneOf:
        - $ref: '#/components/schemas/advertise.allowListAppsTargeting'
        - $ref: '#/components/schemas/advertise.blockListAppsTargeting'

    advertise.deviceTargetingOptions:
      anyOf:
        - $ref: '#/components/schemas/advertise.androidDeviceTargetingOptions'
        - $ref: '#/components/schemas/advertise.iosDeviceTargetingOptions'

    advertise.allowListAppsTargeting:
      type: object
      additionalProperties: false
      properties:
        allowList:
          $ref: '#/components/schemas/advertise.sourceAppIds'

    advertise.blockListAppsTargeting:
      type: object
      additionalProperties: false
      properties:
        blockList:
          $ref: '#/components/schemas/advertise.sourceAppIds'

    advertise.sourceAppIds:
      type: array
      description: Array of source App IDs.
      items:
        $ref: '#/components/schemas/advertise.sourceAppId'

    advertise.androidDeviceTargetingOptions:
      type: object
      additionalProperties: false
      properties:
        limitedAdTracking:
          $ref: '#/components/schemas/advertise.limitedAdTrackingArray'
        osMin:
          $ref: '#/components/schemas/advertise.minAndroidVersion'
        osMax:
          $ref: '#/components/schemas/advertise.maxAndroidVersion'

    advertise.iosDeviceTargetingOptions:
      type: object
      additionalProperties: false
      properties:
        limitedAdTracking:
          $ref: '#/components/schemas/advertise.limitedAdTrackingArray'
        allowedDevices:
          $ref: '#/components/schemas/advertise.iosDeviceList'
        osMin: 
          $ref: '#/components/schemas/advertise.minIosVersion'
        osMax:
          $ref: '#/components/schemas/advertise.maxIosVersion'

    advertise.limitedAdTrackingArray:
      type: array
      description: |
        Use this option to choose whether you want to target only users who have limited ad tracking enabled,
        only those who have it disabled, or both. Defaults to both.

        _Note: In order to use the Limited ad tracking setting, you must provide an attribution link from a provider that supports LAT._
      minItems: 1
      maxItems: 2
      uniqueItems: true
      items:
        $ref: '#/components/schemas/advertise.limitedAdTracking'

    advertise.limitedAdTracking:
      type: string
      description: Option for users that have limited ad tracking enabled or disabled.
      example: USERS_ALLOWING_AD_TRACKING
      enum:
        - USERS_ALLOWING_AD_TRACKING
        - USERS_NOT_ALLOWING_AD_TRACKING

    advertise.latestOsVersion:
      type: string
      description: Latest OS version
      enum:
        - 'latest'

    advertise.iosDeviceList:
      type: array
      description: Devices to target. By default it target all devices.
      minItems: 1
      uniqueItems: true
      items:
        $ref: 'https://services.docs.unity.com/specs/v1/commonConstants.yaml#/components/schemas/constants.apple.allDevices'

    advertise.iosVersion:
      $ref: 'https://services.docs.unity.com/specs/v1/commonConstants.yaml#/components/schemas/constants.apple.osVersion'

    advertise.minIosVersion:
      description: Minimum iOS version targeted. Default set to first iOS version.
      default: '6.0'
      $ref: '#/components/schemas/advertise.iosVersion'

    advertise.maxIosVersion:
      description: Maximum iOS version targeted. Default set to latest iOS version.
      default: 'latest'
      oneOf:
        - $ref: '#/components/schemas/advertise.latestOsVersion'
        - $ref: '#/components/schemas/advertise.iosVersion'

    advertise.androidVersion:
      $ref: 'https://services.docs.unity.com/specs/v1/commonConstants.yaml#/components/schemas/constants.android.osVersion'

    advertise.minAndroidVersion:
      description: Minimum Android version targeted. Default set to first Android version.
      default: '2.3'
      $ref: '#/components/schemas/advertise.androidVersion'

    advertise.maxAndroidVersion:
      description: Maximum Android version targeted. Default set to latest Android version.
      default: 'latest'
      oneOf:
        - $ref: '#/components/schemas/advertise.latestOsVersion'
        - $ref: '#/components/schemas/advertise.androidVersion'
